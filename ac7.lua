local component = require("component")
local event = require("event")
local serialization = require("serialization")
local term = require("term")
local thread = require("thread")
local computer = require("computer")
local filesystem = require("filesystem")

-- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
local STORAGE_CONFIG = {
    primaryStorage = "/home/",
    maxMemoryItems = 4000,
    maxCraftables = 2000,
    chunkSize = 50,
    saveChunkSize = 500
}

if not component.isAvailable("me_interface") then
  print("–û—à–∏–±–∫–∞: ME –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
  print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ ME –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É")
  return
end

local me = component.me_interface
local running = true
local craftThread = nil
local craftingEnabled = false

local craftDB = {}  
local configFile = "/home/craft_config.txt"
local meKnowledgeFile = "/home/me_knowledge.txt"
local essentialFile = "/home/essential_data.txt"

local meKnowledge = {
    items = {},          
    craftables = {},     
    cpus = {},           
    patterns = {},       
    craftTimes = {},     
    craftHistory = {},   
    researchDB = {}      
}

-- –£–ü–†–û–©–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–•
local function saveDataToFile(filename, data)
    for attempt = 1, 2 do
        local file = io.open(filename, "w")
        if file then
            local ok, serialized = pcall(serialization.serialize, data)
            if ok and serialized then
                file:write(serialized)
                file:close()
                return true
            else
                file:close()
            end
        end
        os.sleep(0.1)
    end
    return false
end

-- –£–ü–†–û–©–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•
local function loadDataFromFile(filename)
    for attempt = 1, 2 do
        local file = io.open(filename, "r")
        if file then
            local content = file:read("*a")
            file:close()
            if content and content ~= "" then
                local success, data = pcall(serialization.unserialize, content)
                if success and data then
                    return data
                end
            end
        end
        os.sleep(0.1)
    end
    return nil
end

-- –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏
local function freeMemory()
    collectgarbage()
    local temp = {}
    for i = 1, 10 do
        temp[i] = {}
        for j = 1, 2 do
            temp[i][j] = string.rep("x", 10)
        end
    end
    temp = nil
    collectgarbage()
end

-- –ü–û–≠–¢–ê–ü–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –ë–û–õ–¨–®–ò–• –¢–ê–ë–õ–ò–¶ –ß–ê–ù–ö–ê–ú–ò
local function saveLargeTableChunked(filename, data, chunkSize)
    chunkSize = chunkSize or STORAGE_CONFIG.saveChunkSize
    
    if not data or type(data) ~= "table" then
        return false
    end
    
    -- –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –º–∞–ª–µ–Ω—å–∫–∞—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–∏–∫–æ–º
    if #data <= chunkSize then
        return saveDataToFile(filename, data)
    end
    
    print("üíæ –ü–æ—ç—Ç–∞–ø–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ " .. #data .. " –∑–∞–ø–∏—Å–µ–π...")
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞–Ω–∫–∞–º–∏
    local totalChunks = math.ceil(#data / chunkSize)
    local baseName = filename:gsub("%.txt$", "")
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    local metadata = {
        totalChunks = totalChunks,
        chunkSize = chunkSize,
        totalRecords = #data,
        baseName = baseName
    }
    
    if not saveDataToFile(baseName .. "_meta.txt", metadata) then
        return false
    end
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫
    for chunkIndex = 1, totalChunks do
        local startIndex = (chunkIndex - 1) * chunkSize + 1
        local endIndex = math.min(chunkIndex * chunkSize, #data)
        
        local chunkData = {}
        for i = startIndex, endIndex do
            table.insert(chunkData, data[i])
        end
        
        local chunkFilename = baseName .. "_chunk_" .. chunkIndex .. ".txt"
        if not saveDataToFile(chunkFilename, chunkData) then
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞–Ω–∫–∞ " .. chunkIndex)
            return false
        end
        
        print("   ‚úÖ –ß–∞–Ω–∫ " .. chunkIndex .. "/" .. totalChunks .. " —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        freeMemory()
    end
    
    print("‚úÖ –í—Å–µ —á–∞–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    return true
end

-- –ü–û–≠–¢–ê–ü–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ë–û–õ–¨–®–ò–• –¢–ê–ë–õ–ò–¶
local function loadLargeTableChunked(filename)
    local baseName = filename:gsub("%.txt$", "")
    
    -- –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–µ–ª–∏–∫–æ–º (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    local fullData = loadDataFromFile(filename)
    if fullData then
        return fullData
    end
    
    -- –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    local metadata = loadDataFromFile(baseName .. "_meta.txt")
    if not metadata then
        return nil
    end
    
    print("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ " .. metadata.totalRecords .. " –∑–∞–ø–∏—Å–µ–π –∏–∑ " .. metadata.totalChunks .. " —á–∞–Ω–∫–æ–≤...")
    
    local result = {}
    
    -- –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫
    for chunkIndex = 1, metadata.totalChunks do
        local chunkFilename = baseName .. "_chunk_" .. chunkIndex .. ".txt"
        local chunkData = loadDataFromFile(chunkFilename)
        
        if chunkData then
            for _, item in ipairs(chunkData) do
                table.insert(result, item)
            end
        else
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞–Ω–∫–∞ " .. chunkIndex)
            return nil
        end
        
        freeMemory()
    end
    
    print("‚úÖ –í—Å–µ —á–∞–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    return result
end

local function tableLength(tbl)
    if not tbl then return 0 end
    local count = 0
    for _ in pairs(tbl) do
        count = count + 1
    end
    return count
end

-- –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
local function loadMEKnowledge()
    print("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π ME —Å–∏—Å—Ç–µ–º—ã...")
    
    -- –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    local data = loadDataFromFile(essentialFile)
    if data then
        meKnowledge.patterns = data.patterns or {}
        meKnowledge.craftTimes = data.craftTimes or {}
        meKnowledge.cpus = data.cpus or {}
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    end
    
    -- –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã
    meKnowledge.items = loadDataFromFile(meKnowledgeFile) or {}
    
    -- –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —á–∞–Ω–∫–∞–º–∏
    if #meKnowledge.items == 0 then
        meKnowledge.items = loadLargeTableChunked(meKnowledgeFile) or {}
    end
    
    -- –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—Ä–∞—Ñ—Ç—ã
    local craftablesData = loadDataFromFile("/home/craftables_data.txt")
    if craftablesData then
        meKnowledge.craftables = craftablesData
    else
        meKnowledge.craftables = {}
    end
    
    print("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    print("   –ü—Ä–µ–¥–º–µ—Ç—ã: " .. #meKnowledge.items)
    print("   –ö—Ä–∞—Ñ—Ç—ã: " .. #meKnowledge.craftables)
    print("   –ü–∞—Ç—Ç–µ—Ä–Ω—ã: " .. tableLength(meKnowledge.patterns))
    
    return true
end

-- –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
local function saveMEKnowledge()
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
    
    local success = true
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
    if meKnowledge.items then
        if #meKnowledge.items > STORAGE_CONFIG.saveChunkSize then
            if not saveLargeTableChunked(meKnowledgeFile, meKnowledge.items) then
                success = false
            end
        else
            if not saveDataToFile(meKnowledgeFile, meKnowledge.items) then
                success = false
            end
        end
    end
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∞—Ñ—Ç—ã
    if meKnowledge.craftables then
        if not saveDataToFile("/home/craftables_data.txt", meKnowledge.craftables) then
            success = false
        end
    end
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    local essentialData = {
        patterns = meKnowledge.patterns or {},
        craftTimes = meKnowledge.craftTimes or {},
        cpus = meKnowledge.cpus or {}
    }
    
    if not saveDataToFile(essentialFile, essentialData) then
        success = false
    end
    
    if success then
        print("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    else
        print("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    end
    
    return success
end

-- –°–û–•–†–ê–ù–ï–ù–ò–ï –û–°–ù–û–í–ù–´–• –î–ê–ù–ù–´–•
local function saveEssentialData()
    local essentialData = {
        patterns = meKnowledge.patterns or {},
        craftTimes = meKnowledge.craftTimes or {},
        cpus = meKnowledge.cpus or {}
    }
    return saveDataToFile(essentialFile, essentialData)
end

-- –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ê–í–¢–û–ö–†–ê–§–¢–û–í
local function loadConfig()
    print("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–æ–≤...")
    
    local data = loadDataFromFile(configFile)
    if data then
        craftDB = data
        print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–æ–≤: " .. tableLength(craftDB))
        return true
    end
    
    craftDB = {}
    print("üìÅ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return false
end

-- –°–û–•–†–ê–ù–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ê–í–¢–û–ö–†–ê–§–¢–û–í
local function saveConfig()
    return saveDataToFile(configFile, craftDB)
end

-- –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–æ–∫–∞–∑ —Å—Ç—Ä–∞–Ω–∏—Ü
local function showPaginated(data, title, itemsPerPage)
    if not data or #data == 0 then
        print("   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        print("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        io.read()
        return
    end
    
    itemsPerPage = itemsPerPage or 20
    local totalPages = math.ceil(#data / itemsPerPage)
    local currentPage = 1
    
    while true do
        term.clear()
        print("=== " .. title .. " ===")
        print("–°—Ç—Ä–∞–Ω–∏—Ü–∞ " .. currentPage .. " –∏–∑ " .. totalPages)
        print()
        
        local startIndex = (currentPage - 1) * itemsPerPage + 1
        local endIndex = math.min(currentPage * itemsPerPage, #data)
        
        for i = startIndex, endIndex do
            if data[i] then
                print(data[i])
            end
        end
        
        print("\n" .. string.rep("=", 40))
        print("–ù–∞–≤–∏–≥–∞—Ü–∏—è: [P]—Ä–µ–¥—ã–¥—É—â–∞—è | [N]—Å–ª–µ–¥—É—é—â–∞—è | [E]–≤—ã—Ö–æ–¥")
        
        local input = io.read():lower()
        if input == "n" and currentPage < totalPages then
            currentPage = currentPage + 1
        elseif input == "p" and currentPage > 1 then
            currentPage = currentPage - 1
        elseif input == "e" then
            break
        end
    end
end

-- –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ê–ù–ê–õ–ò–ó ME –°–ò–°–¢–ï–ú–´
local function analyzeMESystem()
    print("üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ ME —Å–∏—Å—Ç–µ–º—ã...")
    
    -- –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    meKnowledge.items = {}
    meKnowledge.craftables = {}
    meKnowledge.patterns = {}
    collectgarbage()
    
    -- –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    print("üì¶ –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
    local success, items = pcall(me.getItemsInNetwork)
    if success and items then
        local itemCount = #items
        print("   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: " .. itemCount)
        
        for i = 1, itemCount do
            local item = items[i]
            if item and item.name then
                table.insert(meKnowledge.items, {
                    name = item.name,
                    size = item.size or 0,
                    label = item.label or "–Ω–µ—Ç"
                })
            end
            
            -- –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 100 –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            if i % 100 == 0 then
                print("   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: " .. i .. "/" .. itemCount)
                saveEssentialData()
                freeMemory()
            end
        end
        print("‚úÖ –ü—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: " .. #meKnowledge.items)
    else
        print("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
    end
    
    -- –ê–Ω–∞–ª–∏–∑ –∫—Ä–∞—Ñ—Ç–æ–≤
    print("üõ†Ô∏è –ê–Ω–∞–ª–∏–∑ –∫—Ä–∞—Ñ—Ç–æ–≤...")
    local success, craftables = pcall(me.getCraftables)
    if success and craftables then
        local craftableCount = #craftables
        print("   –ù–∞–π–¥–µ–Ω–æ –∫—Ä–∞—Ñ—Ç–æ–≤: " .. craftableCount)
        
        for i = 1, craftableCount do
            local craftable = craftables[i]
            if craftable and craftable.getItemStack then
                local itemSuccess, itemStack = pcall(craftable.getItemStack)
                if itemSuccess and itemStack and itemStack.name then
                    table.insert(meKnowledge.craftables, {
                        index = i,
                        itemStack = {
                            name = itemStack.name,
                            label = itemStack.label or "–Ω–µ—Ç"
                        }
                    })
                    
                    meKnowledge.patterns[itemStack.name] = i
                end
            end
            
            if i % 50 == 0 then
                freeMemory()
            end
        end
        print("‚úÖ –ö—Ä–∞—Ñ—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–æ: " .. #meKnowledge.craftables)
    else
        print("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∞—Ñ—Ç–æ–≤")
    end
    
    -- –ê–Ω–∞–ª–∏–∑ –¶–ü
    print("‚ö° –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤...")
    local success, cpus = pcall(me.getCraftingCPUs)
    if success and cpus then
        meKnowledge.cpus = {}
        for i, cpu in ipairs(cpus) do
            if cpu then
                table.insert(meKnowledge.cpus, {
                    index = i,
                    busy = cpu.busy or false,
                    name = cpu.name or "–¶–ü #" .. i
                })
            end
        end
        print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: " .. #meKnowledge.cpus)
    end
    
    -- –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    freeMemory()
    saveMEKnowledge()
    
    print("\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("üìä –ò—Ç–æ–≥–∏:")
    print("   üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã: " .. #meKnowledge.items)
    print("   üõ†Ô∏è –ö—Ä–∞—Ñ—Ç—ã: " .. #meKnowledge.craftables)
    print("   ‚ö° –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã: " .. #meKnowledge.cpus)
    
    print("\n–ù–∞–∂–º–∏—Ç–µ Enter...")
    io.read()
end

-- –£–ú–ù–´–ô –ü–û–ò–°–ö CRAFTABLE
local function findCraftableSmart(itemID, itemName)
    if meKnowledge.patterns and meKnowledge.patterns[itemID] then
        return meKnowledge.patterns[itemID]
    end
    
    if meKnowledge.craftables then
        for i, craftableInfo in ipairs(meKnowledge.craftables) do
            if craftableInfo.itemStack and craftableInfo.itemStack.name == itemID then
                meKnowledge.patterns[itemID] = i
                saveEssentialData()
                return i
            end
        end
    end
    
    return nil
end

local function getItemCount(itemID)
    if not meKnowledge.items then return 0 end
    for i, item in ipairs(meKnowledge.items) do
        if item.name == itemID then
            return item.size or 0
        end
    end
    return 0
end

local function updateItemCounts()
    local success, items = pcall(me.getItemsInNetwork)
    if success and items and meKnowledge.items then
        for i, item in ipairs(items) do
            if item and item.name then
                for j, knownItem in ipairs(meKnowledge.items) do
                    if knownItem.name == item.name then
                        knownItem.size = item.size or 0
                        break
                    end
                end
            end
        end
    end
end

local function getAvailableCPU(preferredCPUs, allowOtherCPUs)
    local success, cpus = pcall(me.getCraftingCPUs)
    if not success or not cpus then
        return nil
    end
    
    for _, cpuIndex in ipairs(preferredCPUs) do
        if cpus[cpuIndex] and not cpus[cpuIndex].busy then
            return cpuIndex
        end
    end
    
    if allowOtherCPUs then
        for i, cpu in ipairs(cpus) do
            if cpu and not cpu.busy then
                local isPreferred = false
                for _, preferredIndex in ipairs(preferredCPUs) do
                    if i == preferredIndex then
                        isPreferred = true
                        break
                    end
                end
                if not isPreferred then
                    return i
                end
            end
        end
    end
    
    return nil
end

local function requestCraft(itemID, amount, preferredCPUs, allowOtherCPUs, craftName)
    local craftableIndex = nil
    
    for name, data in pairs(craftDB) do
        if data.itemID == itemID then
            craftableIndex = data.craftableIndex
            break
        end
    end
    
    if not craftableIndex then
        craftableIndex = findCraftableSmart(itemID, craftName)
        if craftableIndex then
            for name, data in pairs(craftDB) do
                if data.itemID == itemID then
                    data.craftableIndex = craftableIndex
                    saveConfig()
                    break
                end
            end
        else
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—Ä–∞—Ñ—Ç –¥–ª—è " .. craftName)
            return false
        end
    end
    
    local success, craftables = pcall(me.getCraftables)
    if not success or not craftables or not craftables[craftableIndex] then
        print("‚ùå –ö—Ä–∞—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: #" .. craftableIndex)
        return false
    end
    
    local craftable = craftables[craftableIndex]
    local craftSuccess, result = pcall(craftable.request, amount)
    
    if craftSuccess then
        if result then
            print("‚úÖ –ó–∞–∫–∞–∑–∞–Ω –∫—Ä–∞—Ñ—Ç: " .. craftName .. " x" .. amount)
            return true
        else
            print("‚ùå –ö—Ä–∞—Ñ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: " .. craftName)
            return false
        end
    else
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–∞: " .. tostring(result))
        return false
    end
end

local function waitForCraft(itemID, targetAmount, craftName)
    local averageTime = meKnowledge.craftTimes and meKnowledge.craftTimes[itemID]
    local timeout = averageTime and (averageTime * 2 + 60) or 120
    local startTime = computer.uptime()
    
    while computer.uptime() - startTime < timeout do
        updateItemCounts()  
        local currentCount = getItemCount(itemID)
        local elapsed = math.floor(computer.uptime() - startTime)
        print("   üì¶ " .. currentCount .. "/" .. targetAmount .. " (" .. elapsed .. "—Å)")
        
        if currentCount >= targetAmount then
            print("‚úÖ –ì–æ—Ç–æ–≤–æ: " .. craftName)
            
            if not meKnowledge.craftTimes or not meKnowledge.craftTimes[itemID] then
                local actualTime = computer.uptime() - startTime
                if not meKnowledge.craftTimes then meKnowledge.craftTimes = {} end
                meKnowledge.craftTimes[itemID] = actualTime
                saveEssentialData()
            end
            
            return true
        end
        
        os.sleep(3)
    end
    
    print("‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è: " .. craftName)
    return false
end

-- –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ê–í–¢–û–ö–†–ê–§–¢–ê
local function craftLoop()
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–∞...")
    
    while craftingEnabled do
        for name, craftData in pairs(craftDB) do
            if not craftingEnabled then break end
            
            updateItemCounts()
            local currentCount = getItemCount(craftData.itemID)
            
            if currentCount < craftData.targetAmount then
                local needed = craftData.targetAmount - currentCount
                print("\nüîç " .. name .. ": " .. currentCount .. "/" .. craftData.targetAmount)
                print("üõ†Ô∏è –ù—É–∂–Ω–æ: " .. needed .. " —à—Ç.")
                
                local availableCPU = getAvailableCPU(craftData.preferredCPUs, craftData.allowOtherCPUs)
                
                if availableCPU then
                    if requestCraft(craftData.itemID, needed, craftData.preferredCPUs, craftData.allowOtherCPUs, name) then
                        waitForCraft(craftData.itemID, craftData.targetAmount, name)
                    end
                else
                    print("‚è≥ –í—Å–µ –¶–ü –∑–∞–Ω—è—Ç—ã, –∂–¥–µ–º...")
                    os.sleep(5)
                end
            end
            
            os.sleep(math.max(5, craftData.checkTimeout or 10))
        end
        
        if craftingEnabled then
            print("\n--- üîÑ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω ---")
            os.sleep(5)
        end
    end
end

-- –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –ê–í–¢–û–ö–†–ê–§–¢–ê
local function toggleAutoCraft()
    if craftingEnabled then
        craftingEnabled = false
        if craftThread then
            craftThread:join()
            craftThread = nil
        end
        print("üõë –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    else
        if tableLength(craftDB) == 0 then
            print("‚ùå –ù–µ—Ç –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏!")
            os.sleep(2)
            return
        end
        craftingEnabled = true
        craftThread = thread.create(craftLoop)
        print("üöÄ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    end
    os.sleep(1)
end

-- –ò–ù–¢–ï–†–§–ï–ô–° –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ê–í–¢–û–ö–†–ê–§–¢–ê
local function addAutoCraft()
    term.clear()
    print("=== ‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–ö–†–ê–§–¢–ê ===")
    print()
    
    print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–∞:")
    local craftName = io.read():gsub("^%s*(.-)%s*$", "%1")
    
    if craftDB[craftName] then
        print("‚ùå –ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        os.sleep(2)
        return
    end
    
    print("–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–µ–¥–º–µ—Ç–∞:")
    local itemID = io.read():gsub("^%s*(.-)%s*$", "%1")
    
    local itemExists = false
    local itemLabel = itemID
    if meKnowledge.items then
        for i, item in ipairs(meKnowledge.items) do
            if item.name == itemID then
                itemExists = true
                itemLabel = item.label or itemID
                break
            end
        end
    end
    
    if not itemExists then
        print("‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º...")
    end
    
    print("–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    local targetAmount = tonumber(io.read())
    
    if not targetAmount or targetAmount <= 0 then
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!")
        os.sleep(2)
        return
    end
    
    print("–ù–æ–º–µ—Ä–∞ –¶–ü (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2,3):")
    local cpuInput = io.read():gsub("^%s*(.-)%s*$", "%1")
    local preferredCPUs = {}
    for cpuStr in cpuInput:gmatch("[^,]+") do
        local cpuIndex = tonumber(cpuStr:match("%d+"))
        if cpuIndex then
            table.insert(preferredCPUs, cpuIndex)
        end
    end
    
    if #preferredCPUs == 0 then
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –¶–ü!")
        os.sleep(2)
        return
    end
    
    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –¶–ü –µ—Å–ª–∏ –∑–∞–Ω—è—Ç—ã? (y/n):")
    local allowOtherInput = io.read():lower()
    local allowOtherCPUs = (allowOtherInput == "y" or allowOtherInput == "yes" or allowOtherInput == "–¥–∞")
    
    print("–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫—É–Ω–¥—ã, –º–∏–Ω–∏–º—É–º 5):")
    local timeout = tonumber(io.read()) or 10
    
    -- –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∫—Ä–∞—Ñ—Ç–∞
    local craftableIndex = findCraftableSmart(itemID, craftName)
    
    craftDB[craftName] = {
        itemID = itemID,
        targetAmount = targetAmount,
        preferredCPUs = preferredCPUs,
        allowOtherCPUs = allowOtherCPUs,
        checkTimeout = timeout,
        craftableIndex = craftableIndex
    }
    
    if saveConfig() then
        print("\n‚úÖ –ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
        print("   –ü—Ä–µ–¥–º–µ—Ç: " .. itemLabel)
        print("   –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: " .. targetAmount)
        print("   –¶–ü: " .. table.concat(preferredCPUs, ", "))
        if craftableIndex then
            print("   –ù–∞–π–¥–µ–Ω –∫—Ä–∞—Ñ—Ç: #" .. craftableIndex)
        else
            print("   ‚ö†Ô∏è –ö—Ä–∞—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        end
    else
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    end
    os.sleep(3)
end

-- –ü–†–û–°–ú–û–¢–† –ë–ê–ó–´ –ê–í–¢–û–ö–†–ê–§–¢–û–í
local function viewCraftDB()
    if tableLength(craftDB) == 0 then
        print("–ë–∞–∑–∞ –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–æ–≤ –ø—É—Å—Ç–∞!")
        os.sleep(2)
        return
    end
    
    local dataToShow = {}
    for name, data in pairs(craftDB) do
        local current = getItemCount(data.itemID)
        local status = current >= data.targetAmount and "‚úÖ" or "‚ùå"
        local craftableInfo = data.craftableIndex and ("–ö—Ä–∞—Ñ—Ç: #" .. data.craftableIndex) or "–ö—Ä–∞—Ñ—Ç: –Ω–µ –Ω–∞–π–¥–µ–Ω"
        local cpusInfo = "–¶–ü: " .. table.concat(data.preferredCPUs, ", ") .. (data.allowOtherCPUs and " (+–¥—Ä—É–≥–∏–µ)" or "")
        
        local entry = string.format("%s %s\n  üì¶ %d/%d | ID: %s\n  %s\n  ‚è∞ %d —Å–µ–∫\n  %s\n%s",
            status, name, current, data.targetAmount, data.itemID, cpusInfo, 
            data.checkTimeout, craftableInfo, string.rep("-", 40))
        
        table.insert(dataToShow, entry)
    end
    
    showPaginated(dataToShow, "üìä –ë–ê–ó–ê –ê–í–¢–û–ö–†–ê–§–¢–û–í", 8)
end

-- –£–î–ê–õ–ï–ù–ò–ï –ê–í–¢–û–ö–†–ê–§–¢–ê
local function removeAutoCraft()
    term.clear()
    print("=== ‚ùå –£–î–ê–õ–ï–ù–ò–ï –ê–í–¢–û–ö–†–ê–§–¢–ê ===")
    
    if tableLength(craftDB) == 0 then
        print("–ë–∞–∑–∞ –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–æ–≤ –ø—É—Å—Ç–∞!")
        os.sleep(2)
        return
    end
    
    local craftNames = {}
    for name in pairs(craftDB) do
        table.insert(craftNames, name)
    end
    
    print("–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–æ–≤:")
    for i, name in ipairs(craftNames) do
        print(i .. ". " .. name)
    end
    
    print("\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    local craftName = io.read():gsub("^%s*(.-)%s*$", "%1")
    
    if craftDB[craftName] then
        craftDB[craftName] = nil
        if saveConfig() then
            print("‚úÖ –ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç —É–¥–∞–ª–µ–Ω!")
        else
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        end
    else
        print("‚ùå –ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    end
    os.sleep(2)
end

-- –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô ME
local function showMEKnowledge()
    term.clear()
    print("=== üìö –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô ME –°–ò–°–¢–ï–ú–´ ===")
    print()
    
    local totalItems = meKnowledge.items and #meKnowledge.items or 0
    local totalCraftables = meKnowledge.craftables and #meKnowledge.craftables or 0
    local totalPatterns = tableLength(meKnowledge.patterns or {})
    local totalCPUs = meKnowledge.cpus and #meKnowledge.cpus or 0
    
    print("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print("   üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã: " .. totalItems)
    print("   üõ†Ô∏è –ö—Ä–∞—Ñ—Ç—ã: " .. totalCraftables)
    print("   üîó –ü–∞—Ç—Ç–µ—Ä–Ω—ã: " .. totalPatterns)
    print("   ‚ö° –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã: " .. totalCPUs)
    
    print("\n" .. string.rep("=", 40))
    print("1 - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
    print("2 - –ü—Ä–æ—Å–º–æ—Ç—Ä –∫—Ä–∞—Ñ—Ç–æ–≤") 
    print("3 - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
    print("4 - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤")
    print("5 - –ù–∞–∑–∞–¥")
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    
    local choice = io.read()
    
    if choice == "1" then
        local dataToShow = {}
        if meKnowledge.items then
            for i, item in ipairs(meKnowledge.items) do
                table.insert(dataToShow, string.format("  %s - %d —à—Ç. (%s)", 
                    item.name, item.size or 0, item.label or "–Ω–µ—Ç"))
            end
        end
        showPaginated(dataToShow, "üì¶ –ü–†–ï–î–ú–ï–¢–´ –í –°–ò–°–¢–ï–ú–ï", 20)
    elseif choice == "2" then
        local dataToShow = {}
        if meKnowledge.craftables then
            for i, craftable in ipairs(meKnowledge.craftables) do
                if craftable.itemStack then
                    table.insert(dataToShow, string.format("  #%d: %s (%s)", 
                        craftable.index, craftable.itemStack.name, craftable.itemStack.label or "–Ω–µ—Ç"))
                end
            end
        end
        showPaginated(dataToShow, "üõ†Ô∏è –î–û–°–¢–£–ü–ù–´–ï –ö–†–ê–§–¢–´", 20)
    elseif choice == "3" then
        local dataToShow = {}
        if meKnowledge.patterns then
            for itemID, craftableIndex in pairs(meKnowledge.patterns) do
                table.insert(dataToShow, string.format("  %s ‚Üí –∫—Ä–∞—Ñ—Ç #%d", itemID, craftableIndex))
            end
        end
        showPaginated(dataToShow, "üîó –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´", 20)
    elseif choice == "4" then
        local dataToShow = {}
        if meKnowledge.cpus then
            for i, cpu in ipairs(meKnowledge.cpus) do
                local status = cpu.busy and "üü° –ó–ê–ù–Ø–¢" or "üü¢ –°–í–û–ë–û–î–ï–ù"
                table.insert(dataToShow, string.format("  #%d: %s - %s", 
                    cpu.index, status, cpu.name or "–¶–ü"))
            end
        end
        showPaginated(dataToShow, "‚ö° –ü–†–û–¶–ï–°–°–û–†–´ –ö–†–ê–§–¢–ê", 20)
    end
end

-- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
local function mainMenu()
    while running do
        term.clear()
        print("=== üß† –°–ò–°–¢–ï–ú–ê –ü–û–î–î–ï–†–ñ–ö–ò –ê–í–¢–û–ö–†–ê–§–¢–ê ===")
        print()
        
        local statusIcon = craftingEnabled and "üü¢" or "üî¥"
        print(statusIcon .. " –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–∞: " .. (craftingEnabled and "–í–ö–õ–Æ–ß–ï–ù–ê" or "–í–´–ö–õ–Æ–ß–ï–ù–ê"))
        print("üìä –ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–æ–≤: " .. tableLength(craftDB))
        print("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: " .. (meKnowledge.items and #meKnowledge.items or 0) .. " –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
        
        print("\n" .. string.rep("=", 40))
        print("1. " .. (craftingEnabled and "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" or "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å") .. " –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç")
        print("2. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç")
        print("3. üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–æ–≤") 
        print("4. ‚ùå –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç")
        print("5. üîç –ê–Ω–∞–ª–∏–∑ ME —Å–∏—Å—Ç–µ–º—ã")
        print("6. üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π ME")
        print("7. üö™ –í—ã—Ö–æ–¥")
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        
        local choice = io.read()
        
        if choice == "1" then
            toggleAutoCraft()
        elseif choice == "2" then
            addAutoCraft()
        elseif choice == "3" then
            viewCraftDB()
        elseif choice == "4" then
            removeAutoCraft()
        elseif choice == "5" then
            analyzeMESystem()
        elseif choice == "6" then
            showMEKnowledge()
        elseif choice == "7" then
            if craftingEnabled then
                craftingEnabled = false
                if craftThread then
                    craftThread:join()
                end
            end
            saveConfig()
            saveEssentialData()
            print("üëã –í—ã—Ö–æ–¥...")
            break
        end
    end
end

-- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´
print("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–∞...")
loadConfig()
loadMEKnowledge()

if (not meKnowledge.items or #meKnowledge.items == 0) and running then
    print("üîÑ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑...")
    analyzeMESystem()
else
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!")
    print("üìä –ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–æ–≤: " .. tableLength(craftDB))
    print("üìö –ü—Ä–µ–¥–º–µ—Ç–æ–≤: " .. #meKnowledge.items)
    os.sleep(2)
end

mainMenu()
