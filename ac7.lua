local component = require("component")
local event = require("event")
local serialization = require("serialization")
local term = require("term")
local thread = require("thread")
local computer = require("computer")

-- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ë–û–õ–¨–®–ò–• –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö
local SAFETY_CONFIG = {
    -- –≠–Ω–µ—Ä–≥–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    minOperationInterval = 1.2,      -- –£–º–µ–Ω—å—à–∏–ª –ø–∞—É–∑—É –¥–ª—è –±–æ–ª—å—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    heavyOperationInterval = 2.5,    -- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ —Ç—è–∂–µ–ª—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    monitorInterval = 3.5,           -- –£–º–µ–Ω—å—à–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    
    -- –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ª–∏–º–∏—Ç—ã –¥–ª—è –ë–û–õ–¨–®–ò–• –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    maxItems = 5000,                 -- –£–≤–µ–ª–∏—á–∏–ª –¥–ª—è 1500+ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    maxCraftables = 3000,            -- –£–≤–µ–ª–∏—á–∏–ª –¥–ª—è 1500+ –∫—Ä–∞—Ñ—Ç–æ–≤
    maxHistory = 500,                -- –£–≤–µ–ª–∏—á–∏–ª –∏—Å—Ç–æ—Ä–∏—é
    maxResearch = 2000,              -- –£–≤–µ–ª–∏—á–∏–ª –ª–∏–º–∏—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    chunkSize = 100,                 -- –£–≤–µ–ª–∏—á–∏–ª —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    saveInterval = 200,              -- –£–≤–µ–ª–∏—á–∏–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    sleepInterval = 0.02,            -- –£–º–µ–Ω—å—à–∏–ª –ø–∞—É–∑—É –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    
    -- –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞
    maxContinuousOperations = 20,    -- –£–≤–µ–ª–∏—á–∏–ª –ª–∏–º–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–π
    cooldownTime = 1.5,              -- –£–º–µ–Ω—å—à–∏–ª –≤—Ä–µ–º—è –æ—Å—Ç—ã–≤–∞–Ω–∏—è
    
    -- –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
    operationTimeout = 180,          -- –£–≤–µ–ª–∏—á–∏–ª —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    retryDelay = 6.0                 -- –£–º–µ–Ω—å—à–∏–ª –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–∞–º–∏
}

local STORAGE_CONFIG = {
    primaryStorage = "/home/",
    externalStorage = "/mnt/raid/",
    useExternalStorage = false
}

-- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
local systemStats = {
    operationsCount = 0,
    lastOperationTime = 0,
    energyWarnings = 0,
    memoryWarnings = 0
}

if not component.isAvailable("me_interface") then
  print("–û—à–∏–±–∫–∞: ME –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
  print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ ME –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É")
  return
end

local me = component.me_interface
local running = true
local monitoring = false
local monitorThread = nil

local craftDB = {}  
local configFile = "/home/craft_config.dat"

local meKnowledgeFile = "/home/me_knowledge.dat"
local meKnowledge = {
    items = {},          
    craftables = {},     
    cpus = {},           
    patterns = {},       
    craftTimes = {},     
    craftHistory = {},   
    researchDB = {}      
}

-- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ë—ã—Å—Ç—Ä–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤
local function fastOptimizeDataForSave(data)
    local optimized = {
        items = data.items or {},
        craftables = data.craftables or {},
        cpus = data.cpus or {},
        patterns = data.patterns or {},
        craftTimes = data.craftTimes or {},
        craftHistory = {},
        researchDB = data.researchDB or {}
    }
    
    -- –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    if data.craftHistory then
        for i = math.max(1, #data.craftHistory - SAFETY_CONFIG.maxHistory + 1), #data.craftHistory do
            if data.craftHistory[i] then
                local obs = data.craftHistory[i]
                table.insert(optimized.craftHistory, {
                    cpuIndex = obs.cpuIndex,
                    duration = obs.duration or 0,
                    status = obs.status or "completed"
                })
            end
        end
    end
    
    return optimized
end

-- –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤
local function fastOptimizeMemory()
    -- –ë—ã—Å—Ç—Ä–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫—Ä–∞—Ñ—Ç–æ–≤
    if meKnowledge.craftHistory and #meKnowledge.craftHistory > SAFETY_CONFIG.maxHistory then
        local newHistory = {}
        for i = math.max(1, #meKnowledge.craftHistory - SAFETY_CONFIG.maxHistory + 1), #meKnowledge.craftHistory do
            table.insert(newHistory, meKnowledge.craftHistory[i])
        end
        meKnowledge.craftHistory = newHistory
    end
    
    -- –ë—ã—Å—Ç—Ä–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    os.sleep(SAFETY_CONFIG.minOperationInterval * 0.5)
end

-- –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —á–∞–Ω–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤
local function fastProcessInChunks(data, processCallback, itemName)
    local total = #data
    print("   üì¶ –í—Å–µ–≥–æ " .. itemName .. ": " .. total)
    
    local result = {}
    local processed = 0
    
    for chunkStart = 1, total, SAFETY_CONFIG.chunkSize do
        if not systemSafetyCheck() then
            print("   ‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            break
        end
        
        local chunkEnd = math.min(chunkStart + SAFETY_CONFIG.chunkSize - 1, total)
        print("   –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞: " .. chunkStart .. "-" .. chunkEnd)
        
        for i = chunkStart, chunkEnd do
            local item = data[i]
            if item then
                local processedItem = processCallback(item, i)
                if processedItem then
                    table.insert(result, processedItem)
                end
            end
            
            processed = processed + 1
            
            -- –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ø–∞—É–∑–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
            if processed % 50 == 0 then
                os.sleep(SAFETY_CONFIG.sleepInterval)
            end
        end
        
        -- –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if chunkEnd % SAFETY_CONFIG.saveInterval == 0 then
            fastOptimizeMemory()
            print("   üíæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...")
            os.sleep(SAFETY_CONFIG.minOperationInterval * 0.7)
        end
    end
    
    print("   ‚úÖ " .. itemName .. " –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: " .. #result)
    return result
end

-- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –≤ –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–∞—Ö
local function fastFindInArray(array, predicate)
    if not array then return nil end
    for i = 1, #array do
        if predicate(array[i], i) then
            return array[i], i
        end
        -- –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü–∞—É–∑–∞ –∫–∞–∂–¥—ã–µ 100 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if i % 100 == 0 then
            os.sleep(SAFETY_CONFIG.sleepInterval)
        end
    end
    return nil
end

-- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
local function fastUpdateItemCounts()
    return safeOperation("fastUpdateItemCounts", function()
        local success, items = pcall(me.getItemsInNetwork)
        if success and items and meKnowledge.items then
            -- –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            for i = 1, math.min(200, #items) do
                local item = items[i]
                if item and item.name then
                    local foundItem = fastFindInArray(meKnowledge.items, function(knownItem)
                        return knownItem.name == item.name
                    end)
                    if foundItem then
                        foundItem.size = item.size or 0
                    end
                end
                if i % 20 == 0 then
                    os.sleep(SAFETY_CONFIG.sleepInterval)
                end
            end
        end
    end)
end

-- –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏:

local function confirmAction(message, warning)
    term.clear()
    if warning then
        print("‚ö†Ô∏è  " .. warning)
        print()
    end
    print(message)
    print()
    print("1 - –î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
    print("2 - –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")
    print()
    print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    
    local choice = io.read()
    return choice == "1"
end

local function dataManagement()
    while true do
        term.clear()
        print("=== üóÉÔ∏è  –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò ===")
        print()
        print("1 - üóëÔ∏è  –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫—Ä–∞—Ñ—Ç–æ–≤")
        print("2 - üóëÔ∏è  –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π") 
        print("3 - üóëÔ∏è  –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∏ –∫—Ä–∞—Ñ—Ç–∞")
        print("4 - üóëÔ∏è  –û—á–∏—Å—Ç–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ (–ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å)")
        print("5 - üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        print("6 - üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
        print()
        print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        
        local choice = io.read()
        
        if choice == "1" then
            if confirmAction("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –∫—Ä–∞—Ñ—Ç–æ–≤?", "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ—à–ª—ã—Ö –∫—Ä–∞—Ñ—Ç–∞—Ö!") then
                meKnowledge.craftHistory = {}
                if saveMEKnowledge() then
                    print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∫—Ä–∞—Ñ—Ç–æ–≤ –æ—á–∏—â–µ–Ω–∞!")
                else
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                end
            else
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            end
            os.sleep(2)
            
        elseif choice == "2" then
            if confirmAction("–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π?", "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–µ –∫—Ä–∞—Ñ—Ç—ã!") then
                meKnowledge.researchDB = {}
                meKnowledge.patterns = {}
                if saveMEKnowledge() then
                    print("‚úÖ –ë–∞–∑–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –æ—á–∏—â–µ–Ω–∞!")
                else
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                end
            else
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            end
            os.sleep(2)
            
        elseif choice == "3" then
            if confirmAction("–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∏ –∫—Ä–∞—Ñ—Ç–∞?", "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –∏–∑–º–µ—Ä–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –∫—Ä–∞—Ñ—Ç–æ–≤!") then
                meKnowledge.craftTimes = {}
                if saveMEKnowledge() then
                    print("‚úÖ –î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∏ –∫—Ä–∞—Ñ—Ç–∞ –æ—á–∏—â–µ–Ω—ã!")
                else
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                end
            else
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            end
            os.sleep(2)
            
        elseif choice == "4" then
            if confirmAction("–ü–û–õ–ù–´–ô –°–ë–†–û–° –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö?", "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã!") then
                if confirmAction("–¢–æ—á–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ?", "‚ùå –≠–¢–û –î–ï–ô–°–¢–í–ò–ï –ù–ï–û–ë–†–ê–¢–ò–ú–û!") then
                    meKnowledge = {
                        items = {}, craftables = {}, cpus = {}, 
                        patterns = {}, craftTimes = {}, 
                        craftHistory = {}, researchDB = {}
                    }
                    craftDB = {}
                    if saveMEKnowledge() and saveConfig() then
                        print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã!")
                    else
                        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                    end
                else
                    print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
                end
            else
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            end
            os.sleep(2)
            
        elseif choice == "5" then
            term.clear()
            print("=== üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ê–ù–ù–´–• ===")
            print()
            print("üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã –≤ –ø–∞–º—è—Ç–∏: " .. (#meKnowledge.items or 0))
            print("üõ†Ô∏è Craftables: " .. (#meKnowledge.craftables or 0))
            print("‚ö° –¶–ü: " .. (#meKnowledge.cpus or 0))
            print("üîó –ü–∞—Ç—Ç–µ—Ä–Ω—ã: " .. tableLength(meKnowledge.patterns or {}))
            print("‚è±Ô∏è –í—Ä–µ–º—è –∫—Ä–∞—Ñ—Ç–∞: " .. tableLength(meKnowledge.craftTimes or {}))
            print("üìã –ò—Å—Ç–æ—Ä–∏—è –∫—Ä–∞—Ñ—Ç–æ–≤: " .. (#meKnowledge.craftHistory or 0))
            print("üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: " .. (#meKnowledge.researchDB or 0))
            print("üöÄ –ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–æ–≤: " .. tableLength(craftDB))
            print()
            print("üíæ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω–µ—à–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: " .. (STORAGE_CONFIG.useExternalStorage and "–î–∞" or "–ù–µ—Ç"))
            print()
            print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            io.read()
            
        elseif choice == "6" then
            break
        end
    end
end

local function systemSafetyCheck()
    local currentTime = computer.uptime()
    local timeSinceLastOp = currentTime - systemStats.lastOperationTime
    
    if timeSinceLastOp < SAFETY_CONFIG.minOperationInterval then
        local waitTime = SAFETY_CONFIG.minOperationInterval - timeSinceLastOp
        os.sleep(waitTime)
    end
    
    if systemStats.operationsCount >= SAFETY_CONFIG.maxContinuousOperations then
        os.sleep(SAFETY_CONFIG.cooldownTime)
        systemStats.operationsCount = 0
    end
    
    systemStats.operationsCount = systemStats.operationsCount + 1
    systemStats.lastOperationTime = computer.uptime()
    
    return true
end

local function safeOperation(operationName, operationFunc, ...)
    local startTime = computer.uptime()
    
    while computer.uptime() - startTime < SAFETY_CONFIG.operationTimeout do
        if not systemSafetyCheck() then
            return nil, "–°–∏—Å—Ç–µ–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞"
        end
        
        local success, result = pcall(operationFunc, ...)
        
        if success then
            os.sleep(SAFETY_CONFIG.minOperationInterval)
            return result
        else
            print("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ " .. operationName .. ": " .. tostring(result))
            print("üîÑ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ " .. SAFETY_CONFIG.retryDelay .. " —Å–µ–∫...")
            os.sleep(SAFETY_CONFIG.retryDelay)
        end
    end
    
    return nil, "–¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏: " .. operationName
end

local function heavyOperation(operationName, operationFunc, ...)
    local result = safeOperation(operationName, operationFunc, ...)
    os.sleep(SAFETY_CONFIG.heavyOperationInterval)
    return result
end

local function initExternalStorage()
    local mounts = {"/mnt/raid", "/mnt/external", "/mnt/disk", "/mnt"}
    for _, mount in ipairs(mounts) do
        local checkCmd = "test -d " .. mount .. " 2>/dev/null"
        if os.execute(checkCmd) then
            STORAGE_CONFIG.externalStorage = mount .. "/"
            STORAGE_CONFIG.useExternalStorage = true
            print("‚úÖ –í–Ω–µ—à–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: " .. mount)
            return true
        end
    end
    
    os.execute("mkdir -p /mnt/raid 2>/dev/null")
    print("‚ö†Ô∏è  –í–Ω–µ—à–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ")
    return false
end

local function getStoragePath(filename)
    if STORAGE_CONFIG.useExternalStorage then
        return STORAGE_CONFIG.externalStorage .. filename
    else
        return STORAGE_CONFIG.primaryStorage .. filename
    end
end

local function tableLength(tbl)
    if not tbl then return 0 end
    local count = 0
    for _ in pairs(tbl) do
        count = count + 1
    end
    return count
end

local function getTableKeys(tbl)
    if not tbl then return {} end
    local keys = {}
    for k in pairs(tbl) do
        table.insert(keys, k)
    end
    return keys
end

local function loadMEKnowledge()
    return safeOperation("loadMEKnowledge", function()
        local paths = {
            getStoragePath("me_knowledge.dat"),
            STORAGE_CONFIG.primaryStorage .. "me_knowledge.dat"
        }
        
        for _, path in ipairs(paths) do
            local file = io.open(path, "r")
            if file then
                local data = file:read("*a")
                file:close()
                local success, loaded = pcall(serialization.unserialize, data)
                if success and loaded then
                    meKnowledge = {
                        items = loaded.items or {},
                        craftables = loaded.craftables or {},
                        cpus = loaded.cpus or {},
                        patterns = loaded.patterns or {},
                        craftTimes = loaded.craftTimes or {},
                        craftHistory = loaded.craftHistory or {},
                        researchDB = loaded.researchDB or {}
                    }
                    print("üìö –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π ME —Å–∏—Å—Ç–µ–º—ã")
                    print("   –ü—Ä–µ–¥–º–µ—Ç—ã: " .. #meKnowledge.items)
                    print("   Craftables: " .. #meKnowledge.craftables)
                    print("   –¶–ü: " .. #meKnowledge.cpus)
                    print("   –ü–∞—Ç—Ç–µ—Ä–Ω—ã: " .. tableLength(meKnowledge.patterns))
                    print("   –í—Ä–µ–º—è –∫—Ä–∞—Ñ—Ç–∞: " .. tableLength(meKnowledge.craftTimes))
                    print("   –ò—Å—Ç–æ—Ä–∏—è –∫—Ä–∞—Ñ—Ç–æ–≤: " .. #meKnowledge.craftHistory)
                    return true
                end
            end
        end
        
        print("üìö –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π ME —Å–∏—Å—Ç–µ–º—ã")
        meKnowledge = {items = {}, craftables = {}, cpus = {}, patterns = {}, craftTimes = {}, craftHistory = {}, researchDB = {}}
        return false
    end)
end

local function saveMEKnowledge()
    return safeOperation("saveMEKnowledge", function()
        local optimizedData = fastOptimizeDataForSave(meKnowledge)
        
        local path = getStoragePath("me_knowledge.dat")
        local file = io.open(path, "w")
        if file then
            file:write(serialization.serialize(optimizedData))
            file:close()
            
            if STORAGE_CONFIG.useExternalStorage then
                local backupFile = io.open(STORAGE_CONFIG.primaryStorage .. "me_knowledge.dat", "w")
                if backupFile then
                    backupFile:write(serialization.serialize(optimizedData))
                    backupFile:close()
                end
            end
            
            return true
        end
        return false
    end)
end

local function loadConfig()
    return safeOperation("loadConfig", function()
        local file = io.open(configFile, "r")
        if file then
            local data = file:read("*a")
            file:close()
            local success, loaded = pcall(serialization.unserialize, data)
            if success and loaded then
                craftDB = loaded
            else
                craftDB = {}
            end
            print("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–æ–≤: " .. tableLength(craftDB))
        else
            print("–ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É")
            craftDB = {}
        end
    end)
end

local function saveConfig()
    return safeOperation("saveConfig", function()
        local file = io.open(configFile, "w")
        if file then
            file:write(serialization.serialize(craftDB))
            file:close()
            return true
        end
        return false
    end)
end

local function showPaginated(data, title, itemsPerPage)
    if not data or #data == 0 then
        print("   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        print("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        io.read()
        return
    end
    
    itemsPerPage = itemsPerPage or 20
    local totalPages = math.ceil(#data / itemsPerPage)
    local currentPage = 1
    
    while true do
        term.clear()
        print("=== " .. title .. " ===")
        print("–°—Ç—Ä–∞–Ω–∏—Ü–∞ " .. currentPage .. " –∏–∑ " .. totalPages)
        print()
        
        local startIndex = (currentPage - 1) * itemsPerPage + 1
        local endIndex = math.min(currentPage * itemsPerPage, #data)
        
        for i = startIndex, endIndex do
            if data[i] then
                if type(data[i]) == "string" then
                    print(data[i])
                elseif title:find("–ü–†–ï–î–ú–ï–¢–´") then
                    local item = data[i]
                    print(string.format("  %s - %d —à—Ç. (label: %s)", 
                          item.name or "unknown", item.size or 0, item.label or "–Ω–µ—Ç"))
                elseif title:find("CRAFTABLES") then
                    local craftable = data[i]
                    local itemName = craftable.itemStack and craftable.itemStack.name or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    local label = craftable.itemStack and craftable.itemStack.label or "–Ω–µ—Ç"
                    print(string.format("  #%d: %s (label: %s)", i, itemName, label))
                elseif title:find("–¶–ü") then
                    local cpu = data[i]
                    local status = cpu.busy and "–ó–ê–ù–Ø–¢" or "–°–í–û–ë–û–î–ï–ù"
                    print(string.format("  #%d: %s (%d –ö–ë)", i, status, cpu.storage or 0))
                else
                    print("  " .. tostring(data[i]))
                end
            end
        end
        
        print("\n–ù–∞–≤–∏–≥–∞—Ü–∏—è:")
        if currentPage > 1 then
            print("P - –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        end
        if currentPage < totalPages then
            print("N - –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        end
        print("E - –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é")
        
        local input = io.read():lower()
        if input == "n" and currentPage < totalPages then
            currentPage = currentPage + 1
        elseif input == "p" and currentPage > 1 then
            currentPage = currentPage - 1
        elseif input == "e" then
            break
        end
    end
end

-- –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ ME —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤
local function analyzeMESystem()
    if not confirmAction("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ ME —Å–∏—Å—Ç–µ–º—ã?", "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–∏—Å—Ç–µ–º—É!") then
        print("‚ùå –ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω")
        return
    end
    
    print("üîç –ê–Ω–∞–ª–∏–∑ ME —Å–∏—Å—Ç–µ–º—ã...")
    initExternalStorage()
    fastOptimizeMemory()
    
    if not meKnowledge.items then meKnowledge.items = {} end
    if not meKnowledge.craftables then meKnowledge.craftables = {} end
    if not meKnowledge.cpus then meKnowledge.cpus = {} end
    if not meKnowledge.patterns then meKnowledge.patterns = {} end
    if not meKnowledge.craftTimes then meKnowledge.craftTimes = {} end
    if not meKnowledge.craftHistory then meKnowledge.craftHistory = {} end
    
    -- –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô —á–∞–Ω–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    local success, items = safeOperation("getItemsInNetwork", me.getItemsInNetwork)
    if success and items then
        meKnowledge.items = fastProcessInChunks(items, function(item, index)
            if item and item.name then
                return {
                    name = item.name,
                    size = item.size or 0,
                    label = item.label or "–Ω–µ—Ç"
                }
            end
            return nil
        end, "–ø—Ä–µ–¥–º–µ—Ç–æ–≤")
    else
        print("   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
    end
    
    os.sleep(SAFETY_CONFIG.heavyOperationInterval)
    
    -- –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑ craftables
    print("   üõ†Ô∏è –ê–Ω–∞–ª–∏–∑ craftables...")
    local success, craftables = safeOperation("getCraftables", me.getCraftables)
    if success and craftables then
        meKnowledge.craftables = fastProcessInChunks(craftables, function(craftable, index)
            if craftable then
                local craftableInfo = {
                    index = index,
                    methods = {},
                    fields = {}
                }
                
                if craftable.request then craftableInfo.methods.request = true end
                if craftable.getItemStack then craftableInfo.methods.getItemStack = true end
                
                if craftable.getItemStack then
                    local itemSuccess, itemStack = safeOperation("getItemStack", craftable.getItemStack)
                    if itemSuccess and itemStack then
                        craftableInfo.itemStack = {
                            name = itemStack.name or "unknown",
                            label = itemStack.label or "–Ω–µ—Ç",
                            size = itemStack.size or 1
                        }
                        
                        if itemStack.name then
                            meKnowledge.patterns[itemStack.name] = index
                        end
                    end
                end
                
                return craftableInfo
            end
            return nil
        end, "craftables")
    else
        print("   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ craftables")
    end
    
    os.sleep(SAFETY_CONFIG.heavyOperationInterval)
    
    -- –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑ –¶–ü
    print("   ‚ö° –ê–Ω–∞–ª–∏–∑ –¶–ü...")
    local success, cpus = safeOperation("getCraftingCPUs", me.getCraftingCPUs)
    if success and cpus then
        meKnowledge.cpus = fastProcessInChunks(cpus, function(cpu, index)
            if cpu then
                return {
                    index = index,
                    busy = cpu.busy or false,
                    storage = cpu.storage or 0,
                    name = cpu.name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                }
            end
            return nil
        end, "–¶–ü")
    else
        print("   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¶–ü")
    end
    
    if saveMEKnowledge() then
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ ME —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω!")
    else
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
    end
end

-- –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫—Ä–∞—Ñ—Ç–æ–≤ –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤
local function researchAllCrafts()
    if not confirmAction("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫—Ä–∞—Ñ—Ç–æ–≤?", "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∞—Ñ—Ç—ã –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏!") then
        print("‚ùå –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω")
        return
    end
    
    print("üî¨ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫—Ä–∞—Ñ—Ç–æ–≤...")
    
    local success, craftables = safeOperation("getCraftables", me.getCraftables)
    if not success or not craftables then
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ craftables")
        return
    end
    
    local result = fastProcessInChunks(craftables, function(craftable, index)
        if craftable and craftable.getItemStack then
            local itemSuccess, itemStack = safeOperation("getItemStack", craftable.getItemStack)
            if itemSuccess and itemStack and itemStack.name then
                local itemInfo = {
                    craftableIndex = index,
                    itemID = itemStack.name,
                    label = itemStack.label or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                    size = itemStack.size or 1
                }
                
                meKnowledge.patterns[itemStack.name] = index
                
                if #meKnowledge.researchDB % 100 == 0 then
                    print("   ‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–æ: " .. #meKnowledge.researchDB .. " –∫—Ä–∞—Ñ—Ç–æ–≤")
                    os.sleep(SAFETY_CONFIG.minOperationInterval)
                end
                
                return itemInfo
            end
        end
        return nil
    end, "–∫—Ä–∞—Ñ—Ç–æ–≤ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
    
    meKnowledge.researchDB = result
    
    if saveMEKnowledge() then
        print("‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–∞–π–¥–µ–Ω–æ –∫—Ä–∞—Ñ—Ç–æ–≤: " .. #result)
    else
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π")
    end
    return result
end

local function showResearchDB()
    if not meKnowledge.researchDB or #meKnowledge.researchDB == 0 then
        print("‚ùå –ë–∞–∑–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –ø—É—Å—Ç–∞! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.")
        os.sleep(2)
        return
    end
    
    local dataToShow = {}
    for i, research in ipairs(meKnowledge.researchDB) do
        if i <= 300 then
            table.insert(dataToShow, string.format("Craftable #%d: %s (ID: %s)", 
                research.craftableIndex, research.label, research.itemID))
        end
    end
    
    if #meKnowledge.researchDB > 300 then
        table.insert(dataToShow, "... –∏ –µ—â–µ " .. (#meKnowledge.researchDB - 300) .. " –∑–∞–ø–∏—Å–µ–π")
    end
    
    showPaginated(dataToShow, "üî¨ –ë–ê–ó–ê –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ô –ö–†–ê–§–¢–û–í", 15)
end

local function getItemCount(itemID)
    return safeOperation("getItemCount", function()
        if not meKnowledge.items then return 0 end
        local foundItem = fastFindInArray(meKnowledge.items, function(item)
            return item.name == itemID
        end)
        return foundItem and (foundItem.size or 0) or 0
    end)
end

local function getItemInfo(itemID)
    return safeOperation("getItemInfo", function()
        if not meKnowledge.items then return nil end
        return fastFindInArray(meKnowledge.items, function(item)
            return item.name == itemID
        end)
    end)
end

local function measureCraftTime(itemID, craftName, craftableIndex)
    print("‚è±Ô∏è –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫—Ä–∞—Ñ—Ç–∞ –¥–ª—è: " .. craftName)
    
    local success, craftables = safeOperation("getCraftables", me.getCraftables)
    if not success or not craftables or not craftables[craftableIndex] then
        print("‚ùå Craftable –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏")
        return nil
    end
    
    local craftable = craftables[craftableIndex]
    local totalTime = 0
    local successfulMeasurements = 0
    
    for attempt = 1, 2 do
        if not systemSafetyCheck() then
            print("   ‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            break
        end
        
        print("   –ü–æ–ø—ã—Ç–∫–∞ " .. attempt .. "/2...")
        
        local startCount = getItemCount(itemID)
        local startTime = computer.uptime()
        
        local craftSuccess, result = safeOperation("craftable.request", craftable.request, 1)
        
        if craftSuccess and result then
            local timeout = 20
            local craftCompleted = false
            
            for i = 1, timeout do
                os.sleep(1.5)
                local currentCount = getItemCount(itemID)
                
                if currentCount > startCount then
                    local endTime = computer.uptime()
                    local craftTime = endTime - startTime
                    totalTime = totalTime + craftTime
                    successfulMeasurements = successfulMeasurements + 1
                    craftCompleted = true
                    print("     ‚úÖ –ö—Ä–∞—Ñ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ " .. string.format("%.1f", craftTime) .. " —Å–µ–∫")
                    break
                end
                
                if i % 5 == 0 then
                    os.sleep(SAFETY_CONFIG.minOperationInterval)
                end
            end
            
            if not craftCompleted then
                print("     ‚ùå –¢–∞–π–º–∞—É—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ–ø—ã—Ç–∫–∏ " .. attempt)
            end
        else
            print("     ‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–∞ –∫—Ä–∞—Ñ—Ç–∞")
        end
        
        os.sleep(SAFETY_CONFIG.retryDelay) 
    end
    
    if successfulMeasurements > 0 then
        local averageTime = totalTime / successfulMeasurements
        meKnowledge.craftTimes[itemID] = averageTime
        if saveMEKnowledge() then
            print("   üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∫—Ä–∞—Ñ—Ç–∞: " .. string.format("%.1f", averageTime) .. " —Å–µ–∫")
        else
            print("   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∫—Ä–∞—Ñ—Ç–∞")
        end
        return averageTime
    else
        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –∫—Ä–∞—Ñ—Ç–∞")
        return nil
    end
end

local function showCraftTimes()
    if not meKnowledge.craftTimes or tableLength(meKnowledge.craftTimes) == 0 then
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ –∫—Ä–∞—Ñ—Ç–∞")
        os.sleep(2)
        return
    end
    
    local dataToShow = {}
    local count = 0
    for itemID, time in pairs(meKnowledge.craftTimes) do
        if count < 150 then
            local label = itemID
            local itemInfo = getItemInfo(itemID)
            if itemInfo and itemInfo.label then
                label = itemInfo.label
            end
            
            table.insert(dataToShow, string.format("%s: %.1f —Å–µ–∫", label, time))
            count = count + 1
        else
            break
        end
    end
    
    if tableLength(meKnowledge.craftTimes) > 150 then
        table.insert(dataToShow, "... –∏ –µ—â–µ " .. (tableLength(meKnowledge.craftTimes) - 150) .. " –∑–∞–ø–∏—Å–µ–π")
    end
    
    showPaginated(dataToShow, "‚è±Ô∏è –ë–ê–ó–ê –í–†–ï–ú–ï–ù–ò –ö–†–ê–§–¢–ê", 15)
end

-- –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∞—Ñ—Ç–æ–≤ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–∏—Å—Ç–µ–º
local function monitorActiveCrafts()
    print("üéØ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–∞—Ñ—Ç–æ–≤...")
    
    local lastCpuState = {}
    local currentObservations = {}
    
    if meKnowledge.cpus then
        for i, cpu in ipairs(meKnowledge.cpus) do
            lastCpuState[i] = {busy = cpu.busy or false, name = cpu.name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}
        end
    end
    
    local monitoringCycle = 0
    
    while monitoring do
        monitoringCycle = monitoringCycle + 1
        
        if monitoringCycle % 20 == 0 then
            fastOptimizeMemory()
        end
        
        if monitoringCycle % 8 == 0 then
            if not systemSafetyCheck() then
                os.sleep(SAFETY_CONFIG.retryDelay)
                systemStats.operationsCount = 0
            end
        end
        
        local success, cpus = safeOperation("getCraftingCPUs", me.getCraftingCPUs)
        if success and cpus then
            for i, cpu in ipairs(cpus) do
                if cpu then
                    local currentBusy = cpu.busy or false
                    local lastBusy = lastCpuState[i] and lastCpuState[i].busy or false
                    
                    if currentBusy and not lastBusy then
                        print("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –∫—Ä–∞—Ñ—Ç –Ω–∞ –¶–ü #" .. i)
                        
                        local observation = {
                            cpuIndex = i,
                            cpuName = cpu.name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                            startTime = computer.uptime(),
                            startItems = {},
                            status = "active"
                        }
                        
                        if meKnowledge.items then
                            for j = 1, math.min(100, #meKnowledge.items) do
                                local item = meKnowledge.items[j]
                                if item then
                                    observation.startItems[item.name] = item.size or 0
                                end
                            end
                        end
                        
                        currentObservations[i] = observation
                        
                    elseif not currentBusy and lastBusy and currentObservations[i] then
                        local observation = currentObservations[i]
                        observation.endTime = computer.uptime()
                        observation.duration = observation.endTime - observation.startTime
                        observation.status = "completed"
                        
                        local craftedItems = {}
                        if meKnowledge.items then
                            for j = 1, math.min(100, #meKnowledge.items) do
                                local item = meKnowledge.items[j]
                                if item then
                                    local startCount = observation.startItems[item.name] or 0
                                    local endCount = item.size or 0
                                    if endCount > startCount then
                                        table.insert(craftedItems, {
                                            itemID = item.name,
                                            itemLabel = item.label or item.name,
                                            amount = endCount - startCount
                                        })
                                    end
                                end
                            end
                        end
                        
                        observation.craftedItems = craftedItems
                        
                        if not meKnowledge.craftHistory then
                            meKnowledge.craftHistory = {}
                        end
                        table.insert(meKnowledge.craftHistory, observation)
                        
                        if #craftedItems > 0 then
                            local mainItem = craftedItems[1]
                            meKnowledge.craftTimes[mainItem.itemID] = observation.duration
                        end
                        
                        if #meKnowledge.craftHistory <= SAFETY_CONFIG.maxHistory * 2 then
                            saveMEKnowledge()
                        end
                        
                        print("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω –∫—Ä–∞—Ñ—Ç –Ω–∞ –¶–ü #" .. i .. ", –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " .. string.format("%.1f", observation.duration) .. " —Å–µ–∫")
                        currentObservations[i] = nil
                    end
                    
                    lastCpuState[i] = {busy = currentBusy, name = cpu.name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}
                end
            end
        end
        
        os.sleep(SAFETY_CONFIG.monitorInterval)
    end
end

local function toggleCraftMonitoring()
    if monitoring then
        monitoring = false
        if monitorThread then
            monitorThread:join()
            monitorThread = nil
        end
        print("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∞—Ñ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else
        if confirmAction("–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∞—Ñ—Ç–æ–≤?", "–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—Ä–∞—Ñ—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏") then
            monitoring = true
            monitorThread = thread.create(monitorActiveCrafts)
            print("üéØ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∞—Ñ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω")
        else
            print("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω")
        end
    end
    os.sleep(SAFETY_CONFIG.minOperationInterval * 2)
end

local function showMonitoringStatus()
    term.clear()
    print("=== üéØ –°–¢–ê–¢–£–° –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ö–†–ê–§–¢–û–í ===")
    
    if monitoring then
        print("üìä –°—Ç–∞—Ç—É—Å: üü¢ –ê–ö–¢–ò–í–ï–ù")
        print("üëÅÔ∏è  –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫—Ä–∞—Ñ—Ç–∞–º–∏...")
    else
        print("üìä –°—Ç–∞—Ç—É—Å: üî¥ –í–´–ö–õ–Æ–ß–ï–ù")
    end
    
    print("\n‚ö° –ê–ö–¢–ò–í–ù–´–ï –¶–ü:")
    local success, cpus = safeOperation("getCraftingCPUs", me.getCraftingCPUs)
    local activeCount = 0
    if success and cpus then
        for i, cpu in ipairs(cpus) do
            if cpu and cpu.busy then
                print("   –¶–ü #" .. i .. ": üü° –ó–ê–ù–Ø–¢ - " .. (cpu.name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"))
                activeCount = activeCount + 1
            end
        end
    end
    if activeCount == 0 then
        print("   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–∞—Ñ—Ç–æ–≤")
    end
    
    print("\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –ù–ê–ë–õ–Æ–î–ï–ù–ò–Ø:")
    local recentObservations = {}
    if meKnowledge.craftHistory then
        for i = #meKnowledge.craftHistory, math.max(1, #meKnowledge.craftHistory - 2), -1 do
            table.insert(recentObservations, meKnowledge.craftHistory[i])
        end
    end
    
    if #recentObservations == 0 then
        print("   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—à–ª—ã—Ö –∫—Ä–∞—Ñ—Ç–∞—Ö")
    else
        for i, obs in ipairs(recentObservations) do
            print("   " .. i .. ". –¶–ü #" .. obs.cpuIndex .. " (" .. (obs.cpuName or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è") .. ")")
            print("      –í—Ä–µ–º—è: " .. string.format("%.1f", obs.duration or 0) .. " —Å–µ–∫")
            if obs.craftedItems and #obs.craftedItems > 0 then
                for j, item in ipairs(obs.craftedItems) do
                    if j <= 2 then 
                        print("      üì¶ " .. (item.itemLabel or item.itemID) .. " x" .. item.amount)
                    end
                end
                if #obs.craftedItems > 2 then
                    print("      ... –∏ –µ—â–µ " .. (#obs.craftedItems - 2) .. " –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
                end
            end
            print("      ---")
        end
    end
    
    print("\nüìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: " .. (meKnowledge.craftHistory and #meKnowledge.craftHistory or 0))
    print("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    io.read()
end

-- –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô —É–º–Ω—ã–π –ø–æ–∏—Å–∫ craftable –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤
local function findCraftableSmart(itemID, itemName)
    print("üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫ craftable –¥–ª—è: " .. itemName)
    
    if meKnowledge.patterns and meKnowledge.patterns[itemID] then
        local craftableIndex = meKnowledge.patterns[itemID]
        print("   ‚úÖ –ù–∞–π–¥–µ–Ω –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö: craftable #" .. craftableIndex)
        return craftableIndex
    end
    
    if meKnowledge.craftables then
        for i, craftableInfo in ipairs(meKnowledge.craftables) do
            if i > 400 then break end
            if craftableInfo.itemStack and craftableInfo.itemStack.name == itemID then
                print("   ‚úÖ –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ itemStack: craftable #" .. i)
                meKnowledge.patterns[itemID] = i
                saveMEKnowledge()
                return i
            end
            if i % 40 == 0 then
                os.sleep(SAFETY_CONFIG.sleepInterval)
            end
        end
    end
    
    if meKnowledge.craftables then
        for i, craftableInfo in ipairs(meKnowledge.craftables) do
            if i > 400 then break end
            if craftableInfo.itemStack then
                local stack = craftableInfo.itemStack
                if stack.label and stack.label:lower():find(itemName:lower(), 1, true) then
                    print("   ‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é label: craftable #" .. i)
                    meKnowledge.patterns[itemID] = i
                    saveMEKnowledge()
                    return i
                end
            end
            if i % 40 == 0 then
                os.sleep(SAFETY_CONFIG.sleepInterval)
            end
        end
    end
    
    print("   ‚ùå Craftable –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
    return nil
end

local function requestCraft(itemID, amount, cpuIndex, craftName)
    local craftableIndex = nil
    
    for name, data in pairs(craftDB) do
        if data.itemID == itemID then
            craftableIndex = data.craftableIndex
            break
        end
    end
    
    if not craftableIndex then
        craftableIndex = findCraftableSmart(itemID, craftName)
        if craftableIndex then
            for name, data in pairs(craftDB) do
                if data.itemID == itemID then
                    data.craftableIndex = craftableIndex
                    saveConfig()
                    break
                end
            end
        else
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ craftable –¥–ª—è " .. craftName)
            return false
        end
    end
    
    local success, craftables = safeOperation("getCraftables", me.getCraftables)
    if not success or not craftables or not craftables[craftableIndex] then
        print("‚ùå Craftable –Ω–µ –Ω–∞–π–¥–µ–Ω: #" .. craftableIndex)
        return false
    end
    
    local craftable = craftables[craftableIndex]
    local craftSuccess, result = safeOperation("craftable.request", craftable.request, amount)
    
    if craftSuccess then
        if result then
            print("‚úÖ –ö—Ä–∞—Ñ—Ç –∑–∞–∫–∞–∑–∞–Ω: " .. craftName .. " x" .. amount)
            return true
        else
            print("‚ùå –ö—Ä–∞—Ñ—Ç –≤–µ—Ä–Ω—É–ª false: " .. craftName)
            return false
        end
    else
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –∫—Ä–∞—Ñ—Ç–∞: " .. tostring(result))
        return false
    end
end

local function waitForCraft(itemID, targetAmount, craftName)
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∫—Ä–∞—Ñ—Ç–∞ " .. craftName .. "...")
    
    local averageTime = meKnowledge.craftTimes and meKnowledge.craftTimes[itemID]
    local timeout = averageTime and (averageTime * 3 + 90) or 450
    local startTime = computer.uptime()
    
    if averageTime then
        print("   üìä –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~" .. string.format("%.1f", averageTime) .. " —Å–µ–∫")
    end
    
    local checkCount = 0
    
    while computer.uptime() - startTime < timeout do
        if not systemSafetyCheck() then
            os.sleep(SAFETY_CONFIG.retryDelay)
            systemStats.operationsCount = 0
        end
        
        fastUpdateItemCounts()
        local currentCount = getItemCount(itemID)
        local elapsed = math.floor(computer.uptime() - startTime)
        print("   –ü—Ä–æ–≥—Ä–µ—Å—Å: " .. currentCount .. "/" .. targetAmount .. " (" .. elapsed .. "—Å)")
        
        if currentCount >= targetAmount then
            print("‚úÖ –ö—Ä–∞—Ñ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! " .. craftName)
            
            if not meKnowledge.craftTimes or not meKnowledge.craftTimes[itemID] then
                local actualTime = computer.uptime() - startTime
                if not meKnowledge.craftTimes then meKnowledge.craftTimes = {} end
                meKnowledge.craftTimes[itemID] = actualTime
                saveMEKnowledge()
                print("   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤—Ä–µ–º—è –∫—Ä–∞—Ñ—Ç–∞: " .. string.format("%.1f", actualTime) .. " —Å–µ–∫")
            end
            
            return true
        end
        
        checkCount = checkCount + 1
        if checkCount % 3 == 0 then
            os.sleep(SAFETY_CONFIG.minOperationInterval * 2)
        end
        
        os.sleep(8)
    end
    
    print("‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫—Ä–∞—Ñ—Ç–∞!")
    return false
end

-- –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô —Ü–∏–∫–ª –∫—Ä–∞—Ñ—Ç–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–∏—Å—Ç–µ–º
local function craftLoop()
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–∞...")
    
    local cycleCount = 0
    
    while running do
        cycleCount = cycleCount + 1
        
        if cycleCount % 8 == 0 then
            systemStats.operationsCount = 0
            fastOptimizeMemory()
        end
        
        for name, craftData in pairs(craftDB) do
            if not running then break end
            
            if not systemSafetyCheck() then
                os.sleep(SAFETY_CONFIG.retryDelay)
                systemStats.operationsCount = 0
            end
            
            print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞: " .. name)
            fastUpdateItemCounts()
            local currentCount = getItemCount(craftData.itemID)
            print("üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: " .. currentCount .. "/" .. craftData.targetAmount)
            
            if currentCount < craftData.targetAmount then
                local needed = craftData.targetAmount - currentCount
                print("üõ†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∫—Ä–∞—Ñ—Ç–∏—Ç—å: " .. needed .. " —à—Ç.")
                
                if requestCraft(craftData.itemID, needed, craftData.cpuIndex, name) then
                    waitForCraft(craftData.itemID, craftData.targetAmount, name)
                else
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ñ—Ç")
                end
            else
                print("‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            end
            
            local extendedTimeout = craftData.checkTimeout + 10
            print("‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ " .. extendedTimeout .. " —Å–µ–∫...")
            os.sleep(extendedTimeout)
        end
        
        if running then
            print("\n--- üîÑ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ—Ä—ã–≤ " .. SAFETY_CONFIG.cooldownTime * 2 .. " —Å–µ–∫ ---")
            os.sleep(SAFETY_CONFIG.cooldownTime * 2)
        end
    end
end

local function showMEKnowledge()
    term.clear()
    print("=== üìö –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô ME –°–ò–°–¢–ï–ú–´ ===")
    
    print("\nüì¶ –ü–†–ï–î–ú–ï–¢–´ –í –°–ò–°–¢–ï–ú–ï (" .. (meKnowledge.items and #meKnowledge.items or 0) .. "):")
    local itemsToShow = {}
    if meKnowledge.items then
        for i = 1, math.min(250, #meKnowledge.items) do
            table.insert(itemsToShow, meKnowledge.items[i])
        end
    end
    if #meKnowledge.items > 250 then
        table.insert(itemsToShow, {name = "...", size = 0, label = "–∏ –µ—â–µ " .. (#meKnowledge.items - 250) .. " –ø—Ä–µ–¥–º–µ—Ç–æ–≤"})
    end
    showPaginated(itemsToShow, "üì¶ –ü–†–ï–î–ú–ï–¢–´ –í –°–ò–°–¢–ï–ú–ï", 15)
    
    print("\nüõ†Ô∏è CRAFTABLES (" .. (meKnowledge.craftables and #meKnowledge.craftables or 0) .. "):")
    local craftablesToShow = {}
    if meKnowledge.craftables then
        for i = 1, math.min(250, #meKnowledge.craftables) do
            table.insert(craftablesToShow, meKnowledge.craftables[i])
        end
    end
    if #meKnowledge.craftables > 250 then
        table.insert(craftablesToShow, {itemStack = {name = "...", label = "–∏ –µ—â–µ " .. (#meKnowledge.craftables - 250) .. " craftables"}})
    end
    showPaginated(craftablesToShow, "üõ†Ô∏è CRAFTABLES", 15)
    
    print("\nüîó –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´:")
    local patternsList = {}
    local patternCount = 0
    if meKnowledge.patterns then
        for itemID, craftableIndex in pairs(meKnowledge.patterns) do
            if patternCount < 150 then
                table.insert(patternsList, "  " .. itemID .. " -> craftable #" .. craftableIndex)
                patternCount = patternCount + 1
            else
                break
            end
        end
    end
    if tableLength(meKnowledge.patterns) > 150 then
        table.insert(patternsList, "  ... –∏ –µ—â–µ " .. (tableLength(meKnowledge.patterns) - 150) .. " –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
    end
    showPaginated(patternsList, "üîó –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´", 15)
    
    print("\n‚ö° –¶–ü (" .. (meKnowledge.cpus and #meKnowledge.cpus or 0) .. "):")
    showPaginated(meKnowledge.cpus or {}, "‚ö° –¶–ü", 10)
    
    print("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    io.read()
end

local function showCraftableDetails()
    if not meKnowledge.craftables or #meKnowledge.craftables == 0 then
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ craftables")
        os.sleep(2)
        return
    end
    
    local dataToShow = {}
    local maxDisplay = 30
    
    for i = 1, math.min(maxDisplay, #meKnowledge.craftables) do
        local craftable = meKnowledge.craftables[i]
        local craftableText = "\nCraftable #" .. i .. ":\n"
        
        if craftable.itemStack then
            craftableText = craftableText .. "  ItemStack:\n"
            craftableText = craftableText .. "    ID: " .. (craftable.itemStack.name or "–Ω–µ—Ç") .. "\n"
            craftableText = craftableText .. "    Label: " .. (craftable.itemStack.label or "–Ω–µ—Ç") .. "\n"
            craftableText = craftableText .. "    Size: " .. (craftable.itemStack.size or "–Ω–µ—Ç") .. "\n"
        end
        
        craftableText = craftableText .. "  –ú–µ—Ç–æ–¥—ã: " .. table.concat(getTableKeys(craftable.methods or {}), ", ") .. "\n"
        
        if craftable.fields and next(craftable.fields) ~= nil then
            craftableText = craftableText .. "  –ü–æ–ª—è:\n"
            local fieldCount = 0
            for key, value in pairs(craftable.fields) do
                if fieldCount < 5 then
                    craftableText = craftableText .. "    " .. key .. ": " .. tostring(value) .. "\n"
                    fieldCount = fieldCount + 1
                else
                    craftableText = craftableText .. "    ... –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è\n"
                    break
                end
            end
        end
        
        table.insert(dataToShow, craftableText)
    end
    
    if #meKnowledge.craftables > maxDisplay then
        table.insert(dataToShow, "\n... –∏ –µ—â–µ " .. (#meKnowledge.craftables - maxDisplay) .. " craftables")
    end
    
    showPaginated(dataToShow, "üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó CRAFTABLE", 3)
end

local function showAvailableCPUs()
    print("\n=== ‚ö° –î–û–°–¢–£–ü–ù–´–ï –¶–ü ===")
    if not meKnowledge.cpus or #meKnowledge.cpus == 0 then
        print("   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¶–ü")
        return
    end
    
    for i, cpu in ipairs(meKnowledge.cpus) do
        local status = cpu.busy and "üü° –ó–ê–ù–Ø–¢" or "üü¢ –°–í–û–ë–û–î–ï–ù"
        local storageMB = string.format("%.1f", (cpu.storage or 0) / 1024)
        
        print("–¶–ü #" .. i .. ":")
        print("  –°—Ç–∞—Ç—É—Å: " .. status)
        print("  –ü–∞–º—è—Ç—å: " .. storageMB .. " –ú–ë (" .. (cpu.storage or 0) .. " –ö–ë)")
    end
end

local function addAutoCraft()
    term.clear()
    print("=== ‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–ö–†–ê–§–¢–ê ===")
    
    showAvailableCPUs()
    print()
    
    print("üì¶ –ü–û–°–õ–ï–î–ù–ò–ï 20 –ü–†–ï–î–ú–ï–¢–û–í –í –°–ò–°–¢–ï–ú–ï:")
    local recentItems = {}
    if meKnowledge.items and #meKnowledge.items > 0 then
        local startIndex = math.max(1, #meKnowledge.items - 19)
        for i = startIndex, #meKnowledge.items do
            if meKnowledge.items[i] then
                local item = meKnowledge.items[i]
                print("  " .. item.name .. " - " .. (item.size or 0) .. " —à—Ç. (" .. (item.label or "–Ω–µ—Ç") .. ")")
                table.insert(recentItems, item)
            end
        end
    else
        print("  –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    end
    
    print("\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–∞:")
    local craftName = io.read():gsub("^%s*(.-)%s*$", "%1")
    
    if craftDB[craftName] then
        print("–û—à–∏–±–∫–∞: –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        os.sleep(3)
        return
    end
    
    print("–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–µ–¥–º–µ—Ç–∞ (—Å–º. —Å–ø–∏—Å–æ–∫ –≤—ã—à–µ):")
    local itemID = io.read():gsub("^%s*(.-)%s*$", "%1")
    
    local itemExists = false
    local itemLabel = ""
    if meKnowledge.items then
        local foundItem = fastFindInArray(meKnowledge.items, function(item)
            return item.name == itemID
        end)
        if foundItem then
            itemExists = true
            itemLabel = foundItem.label or itemID
        end
    end
    
    if not itemExists then
        print("–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç " .. itemID .. " –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ME —Å–∏—Å—Ç–µ–º–µ!")
        os.sleep(3)
        return
    end
    
    print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è:")
    local targetAmount = tonumber(io.read())
    
    if not targetAmount or targetAmount <= 0 then
        print("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!")
        os.sleep(2)
        return
    end
    
    print("–í–≤–µ–¥–∏—Ç–µ ‚Ññ–¶–ü –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (1-" .. (meKnowledge.cpus and #meKnowledge.cpus or 0) .. "):")
    local cpuIndex = tonumber(io.read())
    
    local maxCPUs = meKnowledge.cpus and #meKnowledge.cpus or 0
    if not cpuIndex or cpuIndex < 1 or cpuIndex > maxCPUs then
        print("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¶–ü! –î–æ—Å—Ç—É–ø–Ω—ã: 1-" .. maxCPUs)
        os.sleep(2)
        return
    end
    
    print("–í–≤–µ–¥–∏—Ç–µ —Ç–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –º–∏–Ω–∏–º—É–º 10):")
    local timeout = tonumber(io.read())
    
    if not timeout or timeout < 10 then
        timeout = 10
        print("–¢–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –º–∏–Ω–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥")
    end
    
    local craftableIndex = findCraftableSmart(itemID, craftName)
    
    craftDB[craftName] = {
        itemID = itemID,
        targetAmount = targetAmount,
        cpuIndex = cpuIndex,
        checkTimeout = timeout,
        craftableIndex = craftableIndex
    }
    
    print("–ò–∑–º–µ—Ä–∏—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∫—Ä–∞—Ñ—Ç–∞? (y/n):")
    local measure = io.read():lower()
    if measure == "y" and craftableIndex then
        measureCraftTime(itemID, craftName, craftableIndex)
    end
    
    if saveConfig() then
        print("‚úÖ –ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç '" .. craftName .. "' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        print("   –ü—Ä–µ–¥–º–µ—Ç: " .. itemLabel)
        if craftableIndex then
            print("   Craftable: #" .. craftableIndex)
        else
            print("   ‚ö†Ô∏è Craftable –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        end
    else
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–∞")
    end
    os.sleep(3)
end

local function viewCraftDB()
    if tableLength(craftDB) == 0 then
        print("–ë–∞–∑–∞ –ø—É—Å—Ç–∞!")
        os.sleep(2)
        return
    end
    
    local dataToShow = {}
    for name, data in pairs(craftDB) do
        local current = getItemCount(data.itemID)
        local status = current >= data.targetAmount and "‚úÖ" or "‚ùå"
        local craftableInfo = data.craftableIndex and ("Craftable: #" .. data.craftableIndex) or "Craftable: –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        local craftTime = meKnowledge.craftTimes and meKnowledge.craftTimes[data.itemID]
        local timeInfo = craftTime and string.format("–í—Ä–µ–º—è –∫—Ä–∞—Ñ—Ç–∞: %.1f —Å–µ–∫", craftTime) or "–í—Ä–µ–º—è –∫—Ä–∞—Ñ—Ç–∞: –Ω–µ –∏–∑–º–µ—Ä–µ–Ω–æ"
        
        local entry = string.format("%s %s: %d/%d\n  ID: %s\n  –¶–ü: #%d\n  –¢–∞–π–º–∞—É—Ç: %d —Å–µ–∫\n  %s\n  %s\n---",
            status, name, current, data.targetAmount, data.itemID, data.cpuIndex, 
            data.checkTimeout, craftableInfo, timeInfo)
        
        table.insert(dataToShow, entry)
    end
    
    showPaginated(dataToShow, "üìä –ë–ê–ó–ê –ê–í–¢–û–ö–†–ê–§–¢–û–í", 5)
end

local function removeAutoCraft()
    term.clear()
    print("=== ‚ùå –£–î–ê–õ–ï–ù–ò–ï –ê–í–¢–û–ö–†–ê–§–¢–ê ===")
    
    if tableLength(craftDB) == 0 then
        print("–ë–∞–∑–∞ –ø—É—Å—Ç–∞!")
        os.sleep(2)
        return
    end
    
    local craftNames = {}
    for name in pairs(craftDB) do
        table.insert(craftNames, name)
    end
    
    showPaginated(craftNames, "–°–ü–ò–°–û–ö –ê–í–¢–û–ö–†–ê–§–¢–û–í", 20)
    
    print("\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    local craftName = io.read():gsub("^%s*(.-)%s*$", "%1")
    
    if craftDB[craftName] then
        craftDB[craftName] = nil
        if saveConfig() then
            print("‚úÖ –£–¥–∞–ª–µ–Ω–æ!")
        else
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        end
    else
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ!")
    end
    os.sleep(2)
end

local function mainMenu()
    local craftThread = nil
    
    while running do
        term.clear()
        print("=== üß† –£–ú–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ö–†–ê–§–¢–ê ===")
        print("üìä –ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–æ–≤: " .. tableLength(craftDB))
        print("üìö –ó–Ω–∞–Ω–∏–π ME: " .. (meKnowledge.items and #meKnowledge.items or 0) .. " –ø—Ä–µ–¥–º–µ—Ç–æ–≤, " .. 
              (meKnowledge.craftables and #meKnowledge.craftables or 0) .. " craftables")
        print("‚ö° –¶–ü: " .. (meKnowledge.cpus and #meKnowledge.cpus or 0))
        print("‚è±Ô∏è –í—Ä–µ–º—è –∫—Ä–∞—Ñ—Ç–∞: " .. tableLength(meKnowledge.craftTimes or {}))
        print("üìã –ò—Å—Ç–æ—Ä–∏—è –∫—Ä–∞—Ñ—Ç–æ–≤: " .. (meKnowledge.craftHistory and #meKnowledge.craftHistory or 0))
        print("üéØ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: " .. (monitoring and "üü¢ –í–ö–õ" or "üî¥ –í–´–ö–õ"))
        print()
        print("1 - üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–∞")
        print("2 - üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–∞")
        print("3 - ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç")
        print("4 - üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–æ–≤")
        print("5 - ‚ùå –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç")
        print("6 - üîç –ê–Ω–∞–ª–∏–∑ ME —Å–∏—Å—Ç–µ–º—ã")
        print("7 - üìö –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π ME")
        print("8 - üîé –î–µ—Ç–∞–ª–∏ craftables")
        print("9 - üßπ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ME")
        print("10 - üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤—Å–µ –∫—Ä–∞—Ñ—Ç—ã")
        print("11 - üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π")
        print("12 - ‚è±Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Ä–µ–º–µ–Ω–∏ –∫—Ä–∞—Ñ—Ç–∞")
        print("13 - üéØ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∞—Ñ—Ç–æ–≤")
        print("14 - üìä –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        print("15 - üßπ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞–º—è—Ç—å")
        print("16 - üóÉÔ∏è  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏")
        print("17 - üö™ –í—ã—Ö–æ–¥")
        print()
        print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        
        local choice = io.read()
        
        if choice == "1" and not craftThread then
            if tableLength(craftDB) == 0 then
                print("‚ùå –ù–µ—Ç –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–æ–≤ –≤ –±–∞–∑–µ!")
                os.sleep(2)
            else
                craftThread = thread.create(craftLoop)
                print("‚úÖ –ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç –∑–∞–ø—É—â–µ–Ω!")
                os.sleep(1)
            end
        elseif choice == "2" and craftThread then
            running = false
            craftThread:join()
            craftThread = nil
            running = true
            print("‚úÖ –ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            os.sleep(1)
        elseif choice == "3" then
            addAutoCraft()
        elseif choice == "4" then
            viewCraftDB()
        elseif choice == "5" then
            removeAutoCraft()
        elseif choice == "6" then
            analyzeMESystem()
            print("\n–ù–∞–∂–º–∏—Ç–µ Enter...")
            io.read()
        elseif choice == "7" then
            showMEKnowledge()
        elseif choice == "8" then
            showCraftableDetails()
        elseif choice == "9" then
            if confirmAction("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ME —Å–∏—Å—Ç–µ–º—ã?", "–≠—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ!") then
                analyzeMESystem()
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            else
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            end
            os.sleep(2)
        elseif choice == "10" then
            researchAllCrafts()
            print("\n–ù–∞–∂–º–∏—Ç–µ Enter...")
            io.read()
        elseif choice == "11" then
            showResearchDB()
        elseif choice == "12" then
            showCraftTimes()
        elseif choice == "13" then
            toggleCraftMonitoring()
        elseif choice == "14" then
            showMonitoringStatus()
        elseif choice == "15" then
            fastOptimizeMemory()
            print("‚úÖ –ü–∞–º—è—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
            os.sleep(1)
        elseif choice == "16" then
            dataManagement()
        elseif choice == "17" then
            running = false
            if craftThread then
                craftThread:join()
            end
            if monitorThread then
                monitoring = false
                monitorThread:join()
            end
            print("üëã –í—ã—Ö–æ–¥...")
            break
        end
        
        os.sleep(SAFETY_CONFIG.minOperationInterval)
    end
end

print("–ó–∞–≥—Ä—É–∑–∫–∞ —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–∞...")
loadMEKnowledge()
loadConfig()

if not meKnowledge.items or #meKnowledge.items == 0 then
    print("üîÑ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ME —Å–∏—Å—Ç–µ–º—ã...")
    analyzeMESystem()
end

print("‚úÖ –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!")
print("üìä –ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–æ–≤: " .. tableLength(craftDB))
print("üìö –ó–Ω–∞–Ω–∏–π ME: " .. (meKnowledge.items and #meKnowledge.items or 0) .. " –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
print("‚è±Ô∏è –í—Ä–µ–º—è –∫—Ä–∞—Ñ—Ç–∞: " .. tableLength(meKnowledge.craftTimes or {}))
print("üìã –ò—Å—Ç–æ—Ä–∏—è –∫—Ä–∞—Ñ—Ç–æ–≤: " .. (meKnowledge.craftHistory and #meKnowledge.craftHistory or 0))
os.sleep(2)

mainMenu()