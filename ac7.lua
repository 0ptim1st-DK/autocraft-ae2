local component = require("component")
local event = require("event")
local serialization = require("serialization")
local term = require("term")
local thread = require("thread")
local computer = require("computer")

-- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏
local STORAGE_CONFIG = {
    primaryStorage = "/home/",
    externalStorage = "/mnt/raid/",
    maxMemoryItems = 5000,
    chunkSize = 50,  -- –£–º–µ–Ω—å—à–∏–ª —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
    useExternalStorage = false
}

if not component.isAvailable("me_interface") then
  print("–û—à–∏–±–∫–∞: ME –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
  print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ ME –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É")
  return
end

local me = component.me_interface
local running = true
local monitoring = false
local monitorThread = nil

local craftDB = {}  
local configFile = "/home/craft_config.dat"

local meKnowledgeFile = "/home/me_knowledge.dat"
local meKnowledge = {
    items = {},          
    craftables = {},     
    cpus = {},           
    patterns = {},       
    craftTimes = {},     
    craftHistory = {},   
    researchDB = {}      
}

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
local function confirmAction(actionText)
    print("\n" .. actionText .. " (y/n):")
    local input = io.read():lower()
    return (input == "y" or input == "yes" or input == "–¥–∞")
end

-- –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏ (–∞–Ω–∞–ª–æ–≥ collectgarbage)
local function freeMemory()
    -- –°–æ–∑–¥–∞–µ–º –∏ —Å—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
    local temp = {}
    for i = 1, 50 do  -- –£–º–µ–Ω—å—à–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
        temp[i] = {}
        for j = 1, 5 do  -- –£–º–µ–Ω—å—à–∏–ª –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å
            temp[i][j] = string.rep("x", 50)
        end
    end
    temp = nil
end

-- –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–Ω–µ—à–Ω–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
local function initExternalStorage()
    print("üîç –ü–æ–∏—Å–∫ –≤–Ω–µ—à–Ω–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...")
    
    -- –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    STORAGE_CONFIG.useExternalStorage = false
    STORAGE_CONFIG.externalStorage = "/mnt/raid/"
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    local mounts = {"/mnt/raid", "/mnt/external", "/mnt/disk", "/mnt/usb"}
    local storageFound = false
    
    for _, mount in ipairs(mounts) do
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        local checkDir = io.open(mount, "r")
        if checkDir then
            checkDir:close()
            
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
            local testFile = mount .. "/test_write.tmp"
            local testWrite = io.open(testFile, "w")
            if testWrite then
                testWrite:write("test")
                testWrite:close()
                
                -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞–ª—Å—è
                local testRead = io.open(testFile, "r")
                if testRead then
                    local content = testRead:read("*a")
                    testRead:close()
                    os.remove(testFile)
                    
                    if content == "test" then
                        STORAGE_CONFIG.externalStorage = mount .. "/"
                        STORAGE_CONFIG.useExternalStorage = true
                        storageFound = true
                        print("‚úÖ –í–Ω–µ—à–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞–π–¥–µ–Ω–æ: " .. mount)
                        break
                    end
                end
            end
        end
    end
    
    if not storageFound then
        print("‚ö†Ô∏è –í–Ω–µ—à–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ")
        STORAGE_CONFIG.useExternalStorage = false
        -- –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
        STORAGE_CONFIG.externalStorage = "/home/"
    end
    
    return STORAGE_CONFIG.useExternalStorage
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ —Å —É—á–µ—Ç–æ–º –≤–Ω–µ—à–Ω–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
local function getStoragePath(filename)
    if STORAGE_CONFIG.useExternalStorage then
        return STORAGE_CONFIG.externalStorage .. filename
    else
        return STORAGE_CONFIG.primaryStorage .. filename
    end
end

-- –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
local function formatDatabases()
    if not confirmAction("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã! –í—ã —É–≤–µ—Ä–µ–Ω—ã?") then
        print("‚ùå –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return false
    end
    
    if not confirmAction("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ! –í—Å–µ –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç—ã, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –∏—Å—Ç–æ—Ä–∏—è –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?") then
        print("‚ùå –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return false
    end
    
    print("üßπ –ù–∞—á–∞–ª–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...")
    
    -- –û—á–∏—â–∞–µ–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å
    craftDB = {}
    meKnowledge = {
        items = {},          
        craftables = {},     
        cpus = {},           
        patterns = {},       
        craftTimes = {},     
        craftHistory = {},   
        researchDB = {}      
    }
    
    -- –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    local filesToDelete = {
        configFile,
        meKnowledgeFile,
        getStoragePath("me_knowledge.dat"),
        STORAGE_CONFIG.primaryStorage .. "me_knowledge.dat"
    }
    
    local deletedCount = 0
    for _, filePath in ipairs(filesToDelete) do
        if os.remove(filePath) then
            print("‚úÖ –£–¥–∞–ª–µ–Ω: " .. filePath)
            deletedCount = deletedCount + 1
        end
    end
    
    -- –°–æ–∑–¥–∞–µ–º —á–∏—Å—Ç—ã–µ –±–∞–∑—ã
    if saveConfig() and saveMEKnowledge() then
        print("\n‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: " .. deletedCount)
        print("üÜï –°–æ–∑–¥–∞–Ω—ã —á–∏—Å—Ç—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print("üîß –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ")
        return true
    else
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∏—Å—Ç—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")
        return false
    end
end

-- –§—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏
local function optimizeMemory()
    freeMemory()  -- –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –≤–º–µ—Å—Ç–æ collectgarbage
    
    if meKnowledge.craftHistory and #meKnowledge.craftHistory > 50 then  -- –£–º–µ–Ω—å—à–∏–ª –∏—Å—Ç–æ—Ä–∏—é
        local newHistory = {}
        for i = math.max(1, #meKnowledge.craftHistory - 49), #meKnowledge.craftHistory do
            table.insert(newHistory, meKnowledge.craftHistory[i])
        end
        meKnowledge.craftHistory = newHistory
    end
end

local function tableLength(tbl)
    if not tbl then return 0 end
    local count = 0
    for _ in pairs(tbl) do
        count = count + 1
    end
    return count
end

local function getTableKeys(tbl)
    if not tbl then return {} end
    local keys = {}
    for k in pairs(tbl) do
        table.insert(keys, k)
    end
    return keys
end

-- –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
local function loadMEKnowledge()
    local paths = {
        getStoragePath("me_knowledge.dat"),
        STORAGE_CONFIG.primaryStorage .. "me_knowledge.dat"
    }
    
    for _, path in ipairs(paths) do
        local file = io.open(path, "r")
        if file then
            local data = file:read("*a")
            file:close()
            local success, loaded = pcall(serialization.unserialize, data)
            if success and loaded then
                meKnowledge = {
                    items = loaded.items or {},
                    craftables = loaded.craftables or {},
                    cpus = loaded.cpus or {},
                    patterns = loaded.patterns or {},
                    craftTimes = loaded.craftTimes or {},
                    craftHistory = loaded.craftHistory or {},
                    researchDB = loaded.researchDB or {}
                }
                print("üìö –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π ME —Å–∏—Å—Ç–µ–º—ã")
                print("   –ü—Ä–µ–¥–º–µ—Ç—ã: " .. #meKnowledge.items)
                print("   Craftables: " .. #meKnowledge.craftables)
                print("   –¶–ü: " .. (#meKnowledge.cpus and #meKnowledge.cpus or 0))
                print("   –ü–∞—Ç—Ç–µ—Ä–Ω—ã: " .. tableLength(meKnowledge.patterns))
                print("   –í—Ä–µ–º—è –∫—Ä–∞—Ñ—Ç–∞: " .. tableLength(meKnowledge.craftTimes))
                print("   –ò—Å—Ç–æ—Ä–∏—è –∫—Ä–∞—Ñ—Ç–æ–≤: " .. #meKnowledge.craftHistory)
                return true
            end
        end
    end
    
    print("üìö –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π ME —Å–∏—Å—Ç–µ–º—ã")
    meKnowledge = {items = {}, craftables = {}, cpus = {}, patterns = {}, craftTimes = {}, craftHistory = {}, researchDB = {}}
    return false
end

-- –°–£–ü–ï–†-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
local function saveMEKnowledge()
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–µ–±–æ–ª—å—à–∏–º–∏ —á–∞—Å—Ç—è–º–∏
    local success = false
    
    -- –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    local simpleData = {
        patterns = meKnowledge.patterns or {},
        craftTimes = meKnowledge.craftTimes or {},
        researchDB = meKnowledge.researchDB or {},
        cpus = meKnowledge.cpus or {}
    }
    
    -- –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
    simpleData.items = {}
    if meKnowledge.items then
        for i = 1, math.min(3500, #meKnowledge.items) do  -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            local item = meKnowledge.items[i]
            if item then
                table.insert(simpleData.items, {
                    n = item.name,    -- –°–æ–∫—Ä–∞—â–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π
                    s = item.size or 0,
                    l = item.label or "–Ω–µ—Ç"
                })
            end
        end
    end
    
    -- –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ craftables
    simpleData.craftables = {}
    if meKnowledge.craftables then
        for i = 1, math.min(1500, #meKnowledge.craftables) do  -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            local craftable = meKnowledge.craftables[i]
            if craftable and craftable.itemStack then
                table.insert(simpleData.craftables, {
                    i = craftable.index,
                    n = craftable.itemStack.name,
                    l = craftable.itemStack.label or "–Ω–µ—Ç"
                })
            end
        end
    end
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏
    simpleData.craftHistory = {}
    if meKnowledge.craftHistory then
        for i = math.max(1, #meKnowledge.craftHistory - 24), #meKnowledge.craftHistory do
            if meKnowledge.craftHistory[i] then
                local obs = meKnowledge.craftHistory[i]
                table.insert(simpleData.craftHistory, {
                    c = obs.cpuIndex,
                    d = obs.duration or 0,
                    s = obs.status or "completed"
                })
            end
        end
    end
    
    local path = getStoragePath("me_knowledge.dat")
    local file = io.open(path, "w")
    if file then
        -- –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        local ok, serialized = pcall(serialization.serialize, simpleData)
        if ok and serialized then
            file:write(serialized)
            file:close()
            success = true
            
            if STORAGE_CONFIG.useExternalStorage then
                local backupFile = io.open(STORAGE_CONFIG.primaryStorage .. "me_knowledge.dat", "w")
                if backupFile then
                    backupFile:write(serialized)
                    backupFile:close()
                end
            end
        else
            file:close()
            print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        end
    end
    
    return success
end

-- –£–ü–†–û–©–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
local function saveEssentialData()
    local essentialData = {
        patterns = meKnowledge.patterns or {},
        craftTimes = meKnowledge.craftTimes or {}
    }
    
    local path = getStoragePath("me_knowledge_essential.dat")
    local file = io.open(path, "w")
    if file then
        file:write(serialization.serialize(essentialData))
        file:close()
        return true
    end
    return false
end

local function loadConfig()
    local file = io.open(configFile, "r")
    if file then
        local data = file:read("*a")
        file:close()
        local success, loaded = pcall(serialization.unserialize, data)
        if success and loaded then
            craftDB = loaded
        else
            craftDB = {}
        end
        print("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–æ–≤: " .. tableLength(craftDB))
    else
        print("–ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É")
        craftDB = {}
    end
end

local function saveConfig()
    local file = io.open(configFile, "w")
    if file then
        file:write(serialization.serialize(craftDB))
        file:close()
        return true
    end
    return false
end

local function showPaginated(data, title, itemsPerPage)
    if not data or #data == 0 then
        print("   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        print("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        io.read()
        return
    end
    
    itemsPerPage = itemsPerPage or 20
    local totalPages = math.ceil(#data / itemsPerPage)
    local currentPage = 1
    
    while true do
        term.clear()
        print("=== " .. title .. " ===")
        print("–°—Ç—Ä–∞–Ω–∏—Ü–∞ " .. currentPage .. " –∏–∑ " .. totalPages)
        print()
        
        local startIndex = (currentPage - 1) * itemsPerPage + 1
        local endIndex = math.min(currentPage * itemsPerPage, #data)
        
        for i = startIndex, endIndex do
            if data[i] then
                if type(data[i]) == "string" then
                    print(data[i])
                elseif title:find("–ü–†–ï–î–ú–ï–¢–´") then
                    local item = data[i]
                    print(string.format("  %s - %d —à—Ç. (label: %s)", 
                          item.name or "unknown", item.size or 0, item.label or "–Ω–µ—Ç"))
                elseif title:find("CRAFTABLES") then
                    local craftable = data[i]
                    local itemName = craftable.itemStack and craftable.itemStack.name or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    local label = craftable.itemStack and craftable.itemStack.label or "–Ω–µ—Ç"
                    print(string.format("  #%d: %s (label: %s)", i, itemName, label))
                elseif title:find("–¶–ü") then
                    local cpu = data[i]
                    local status = cpu.busy and "–ó–ê–ù–Ø–¢" or "–°–í–û–ë–û–î–ï–ù"
                    print(string.format("  #%d: %s (%d –ö–ë)", i, status, cpu.storage or 0))
                else
                    print("  " .. tostring(data[i]))
                end
            end
        end
        
        print("\n–ù–∞–≤–∏–≥–∞—Ü–∏—è:")
        if currentPage > 1 then
            print("P - –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        end
        if currentPage < totalPages then
            print("N - –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        end
        print("E - –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é")
        
        local input = io.read():lower()
        if input == "n" and currentPage < totalPages then
            currentPage = currentPage + 1
        elseif input == "p" and currentPage > 1 then
            currentPage = currentPage - 1
        elseif input == "e" then
            break
        end
    end
end

-- –°–£–ü–ï–†-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ ME —Å–∏—Å—Ç–µ–º—ã
local function analyzeMESystem()
    if not confirmAction("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ ME —Å–∏—Å—Ç–µ–º—ã? –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.") then
        print("‚ùå –ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω")
        return
    end
    
    print("üîç –ê–Ω–∞–ª–∏–∑ ME —Å–∏—Å—Ç–µ–º—ã...")
    initExternalStorage()
    
    -- –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• –ü–ï–†–ï–î –ù–û–í–´–ú –ê–ù–ê–õ–ò–ó–û–ú
    meKnowledge.items = {}
    meKnowledge.craftables = {}
    meKnowledge.patterns = {}
    
    if not meKnowledge.cpus then meKnowledge.cpus = {} end
    if not meKnowledge.craftTimes then meKnowledge.craftTimes = {} end
    if not meKnowledge.craftHistory then meKnowledge.craftHistory = {} end
    if not meKnowledge.researchDB then meKnowledge.researchDB = {} end
    
    -- –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ —á–∞–Ω–∫–∞–º —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    local success, items = pcall(me.getItemsInNetwork)
    if success and items then
        meKnowledge.items = {}
        local itemCount = #items
        print("   üì¶ –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: " .. itemCount)
        
        -- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –º–∞–ª–µ–Ω—å–∫–∏–º–∏ —á–∞–Ω–∫–∞–º–∏
        for chunkStart = 1, itemCount, STORAGE_CONFIG.chunkSize do
            local chunkEnd = math.min(chunkStart + STORAGE_CONFIG.chunkSize - 1, itemCount)
            print("   –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: " .. chunkStart .. "-" .. chunkEnd)
            
            for i = chunkStart, chunkEnd do
                local item = items[i]
                if item and item.name then
                    table.insert(meKnowledge.items, {
                        name = item.name,
                        size = item.size or 0,
                        label = item.label or "–Ω–µ—Ç"
                    })
                end
                
                -- –ß–∞—Å—Ç–∞—è —Ä–∞–∑–≥—Ä—É–∑–∫–∞ –ø–∞–º—è—Ç–∏
                if i % 10 == 0 then
                    freeMemory()
                    os.sleep(0.1)
                end
            end
            
            -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 50 –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            if chunkEnd % 50 == 0 then
                saveEssentialData()
                freeMemory()
            end
        end
        print("   ‚úÖ –ü—Ä–µ–¥–º–µ—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: " .. #meKnowledge.items)
    else
        print("   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
    end
    
    -- –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑ craftables —Å –ß–†–ï–ó–í–´–ß–ê–ô–ù–û–ô —ç–∫–æ–Ω–æ–º–∏–µ–π –ø–∞–º—è—Ç–∏
    print("   üõ†Ô∏è –ê–Ω–∞–ª–∏–∑ craftables...")
    local success, craftables = pcall(me.getCraftables)
    if success and craftables then
        meKnowledge.craftables = {}
        local craftableCount = #craftables
        print("   üìã –í—Å–µ–≥–æ craftables: " .. craftableCount)
        
        local processed = 0
        local saveCounter = 0
        
        -- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ —á–∞–Ω–∫–∞–º–∏
        for chunkStart = 1, craftableCount, 25 do  -- –£–º–µ–Ω—å—à–∏–ª —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
            local chunkEnd = math.min(chunkStart + 24, craftableCount)
            
            for i = chunkStart, chunkEnd do
                local craftable = craftables[i]
                if craftable then
                    local craftableInfo = {
                        index = i,
                        itemStack = {}
                    }
                    
                    -- –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    if craftable.getItemStack then
                        local itemSuccess, itemStack = pcall(craftable.getItemStack)
                        if itemSuccess and itemStack and itemStack.name then
                            craftableInfo.itemStack = {
                                name = itemStack.name,
                                label = itemStack.label or "–Ω–µ—Ç"
                            }
                            
                            -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ç—Ç–µ—Ä–Ω (—Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ)
                            meKnowledge.patterns[itemStack.name] = i
                        end
                    end
                    
                    table.insert(meKnowledge.craftables, craftableInfo)
                    processed = processed + 1
                    
                    -- –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 craftables
                    if processed % 10 == 0 then
                        print("   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: " .. processed .. "/" .. craftableCount)
                    end
                end
                
                -- –û—á–µ–Ω—å —á–∞—Å—Ç–∞—è —Ä–∞–∑–≥—Ä—É–∑–∫–∞ –ø–∞–º—è—Ç–∏
                if i % 5 == 0 then
                    freeMemory()
                    os.sleep(0.2)  -- –£–≤–µ–ª–∏—á–∏–ª –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                end
            end
            
            -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –¢–û–õ–¨–ö–û –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–∞–∂–¥—ã–µ 25 craftables
            saveCounter = saveCounter + 1
            if saveCounter % 4 == 0 then  -- –ö–∞–∂–¥—ã–µ 100 craftables
                print("   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
                saveEssentialData()
                freeMemory()
            end
        end
        print("   ‚úÖ Craftables –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: " .. #meKnowledge.craftables)
    else
        print("   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ craftables")
    end
    
    -- –ê–Ω–∞–ª–∏–∑ –¶–ü
    print("   ‚ö° –ê–Ω–∞–ª–∏–∑ –¶–ü...")
    local success, cpus = pcall(me.getCraftingCPUs)
    if success and cpus then
        meKnowledge.cpus = {}
        for i, cpu in ipairs(cpus) do
            if cpu then
                table.insert(meKnowledge.cpus, {
                    index = i,
                    busy = cpu.busy or false,
                    storage = cpu.storage or 0,
                    name = cpu.name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                })
            end
        end
        print("   ‚úÖ –¶–ü –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: " .. #meKnowledge.cpus)
    else
        print("   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¶–ü")
    end
    
    -- –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    freeMemory()
    if saveEssentialData() then
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ ME —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω! (—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø–∞—Ç—Ç–µ—Ä–Ω—ã)")
    else
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
    end
end

-- –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫—Ä–∞—Ñ—Ç–æ–≤
local function researchAllCrafts()
    if not confirmAction("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤—Å–µ –∫—Ä–∞—Ñ—Ç—ã? –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.") then
        print("‚ùå –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω")
        return
    end
    
    print("üî¨ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫—Ä–∞—Ñ—Ç–æ–≤...")
    
    local success, craftables = pcall(me.getCraftables)
    if not success or not craftables then
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ craftables")
        return
    end
    
    local researched = 0
    local tempResearchDB = {}
    local craftableCount = #craftables
    
    print("   üìã –í—Å–µ–≥–æ craftables –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: " .. craftableCount)
    
    -- –ò—Å—Å–ª–µ–¥—É–µ–º craftables –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ —á–∞–Ω–∫–∞–º–∏
    for chunkStart = 1, craftableCount, 20 do
        local chunkEnd = math.min(chunkStart + 19, craftableCount)
        
        for i = chunkStart, chunkEnd do
            local craftable = craftables[i]
            if craftable and craftable.getItemStack then
                local itemSuccess, itemStack = pcall(craftable.getItemStack)
                if itemSuccess and itemStack and itemStack.name then
                    table.insert(tempResearchDB, {
                        craftableIndex = i,
                        itemID = itemStack.name,
                        label = itemStack.label or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                    })
                    
                    researched = researched + 1
                    meKnowledge.patterns[itemStack.name] = i
                    
                    if researched % 25 == 0 then
                        print("   ‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–æ: " .. researched .. " –∫—Ä–∞—Ñ—Ç–æ–≤")
                        -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                        saveEssentialData()
                        freeMemory()
                    end
                end
            end
            
            -- –ß–∞—Å—Ç–∞—è —Ä–∞–∑–≥—Ä—É–∑–∫–∞ –ø–∞–º—è—Ç–∏
            if i % 5 == 0 then
                freeMemory()
                os.sleep(0.1)
            end
        end
    end
    
    meKnowledge.researchDB = tempResearchDB
    freeMemory()
    
    if saveEssentialData() then
        print("‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–∞–π–¥–µ–Ω–æ –∫—Ä–∞—Ñ—Ç–æ–≤: " .. researched)
    else
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π")
    end
    return tempResearchDB
end

-- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (showResearchDB, getItemCount, –∏ —Ç.–¥.)
local function showResearchDB()
    if not meKnowledge.researchDB or #meKnowledge.researchDB == 0 then
        print("‚ùå –ë–∞–∑–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –ø—É—Å—Ç–∞! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.")
        os.sleep(2)
        return
    end
    
    local dataToShow = {}
    for i, research in ipairs(meKnowledge.researchDB) do
        table.insert(dataToShow, string.format("Craftable #%d: %s (ID: %s)", 
            research.craftableIndex, research.label, research.itemID))
    end
    
    showPaginated(dataToShow, "üî¨ –ë–ê–ó–ê –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ô –ö–†–ê–§–¢–û–í", 15)
end

local function getItemCount(itemID)
    if not meKnowledge.items then return 0 end
    for i, item in ipairs(meKnowledge.items) do
        if item.name == itemID then
            return item.size or 0
        end
    end
    return 0
end

local function getItemInfo(itemID)
    if not meKnowledge.items then return nil end
    for i, item in ipairs(meKnowledge.items) do
        if item.name == itemID then
            return item
        end
    end
    return nil
end

-- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∫—Ä–∞—Ñ—Ç–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
local function measureCraftTime(itemID, craftName, craftableIndex)
    if not confirmAction("–ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫—Ä–∞—Ñ—Ç–∞ —Å–æ–∑–¥–∞—Å—Ç 3 –ø—Ä–µ–¥–º–µ—Ç–∞. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?") then
        print("‚ùå –ò–∑–º–µ—Ä–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return nil
    end
    
    print("‚è±Ô∏è –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫—Ä–∞—Ñ—Ç–∞ –¥–ª—è: " .. craftName)
    
    local success, craftables = pcall(me.getCraftables)
    if not success or not craftables or not craftables[craftableIndex] then
        print("‚ùå Craftable –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏")
        return nil
    end
    
    local craftable = craftables[craftableIndex]
    local totalTime = 0
    local successfulMeasurements = 0
    
    for attempt = 1, 3 do
        print("   –ü–æ–ø—ã—Ç–∫–∞ " .. attempt .. "/3...")
        
        local startCount = getItemCount(itemID)
        local startTime = computer.uptime()
        
        local craftSuccess, result = pcall(craftable.request, 1)
        
        if craftSuccess and result then
            local timeout = 30
            local craftCompleted = false
            
            for i = 1, timeout do
                os.sleep(1)
                local currentCount = getItemCount(itemID)
                
                if currentCount > startCount then
                    local endTime = computer.uptime()
                    local craftTime = endTime - startTime
                    totalTime = totalTime + craftTime
                    successfulMeasurements = successfulMeasurements + 1
                    craftCompleted = true
                    print("     ‚úÖ –ö—Ä–∞—Ñ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ " .. string.format("%.1f", craftTime) .. " —Å–µ–∫")
                    break
                end
            end
            
            if not craftCompleted then
                print("     ‚ùå –¢–∞–π–º–∞—É—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ–ø—ã—Ç–∫–∏ " .. attempt)
            end
        else
            print("     ‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–∞ –∫—Ä–∞—Ñ—Ç–∞")
        end
        
        os.sleep(2) 
    end
    
    if successfulMeasurements > 0 then
        local averageTime = totalTime / successfulMeasurements
        meKnowledge.craftTimes[itemID] = averageTime
        if saveEssentialData() then
            print("   üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∫—Ä–∞—Ñ—Ç–∞: " .. string.format("%.1f", averageTime) .. " —Å–µ–∫")
        else
            print("   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∫—Ä–∞—Ñ—Ç–∞")
        end
        return averageTime
    else
        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –∫—Ä–∞—Ñ—Ç–∞")
        return nil
    end
end

local function showCraftTimes()
    if not meKnowledge.craftTimes or tableLength(meKnowledge.craftTimes) == 0 then
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ –∫—Ä–∞—Ñ—Ç–∞")
        os.sleep(2)
        return
    end
    
    local dataToShow = {}
    for itemID, time in pairs(meKnowledge.craftTimes) do
        local label = itemID
        local itemInfo = getItemInfo(itemID)
        if itemInfo and itemInfo.label then
            label = itemInfo.label
        end
        
        table.insert(dataToShow, string.format("%s: %.1f —Å–µ–∫", label, time))
    end
    
    showPaginated(dataToShow, "‚è±Ô∏è –ë–ê–ó–ê –í–†–ï–ú–ï–ù–ò –ö–†–ê–§–¢–ê", 15)
end

-- –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–∞—Ñ—Ç–æ–≤
local function monitorActiveCrafts()
    print("üéØ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–∞—Ñ—Ç–æ–≤...")
    
    local lastCpuState = {}
    local currentObservations = {}
    
    if meKnowledge.cpus then
        for i, cpu in ipairs(meKnowledge.cpus) do
            lastCpuState[i] = {busy = cpu.busy or false, name = cpu.name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}
        end
    end
    
    while monitoring do
        local success, cpus = pcall(me.getCraftingCPUs)
        if success and cpus then
            for i, cpu in ipairs(cpus) do
                if cpu then
                    local currentBusy = cpu.busy or false
                    local lastBusy = lastCpuState[i] and lastCpuState[i].busy or false
                    
                    if currentBusy and not lastBusy then
                        print("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –∫—Ä–∞—Ñ—Ç –Ω–∞ –¶–ü #" .. i .. " (" .. (cpu.name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è") .. ")")
                        
                        local observation = {
                            cpuIndex = i,
                            cpuName = cpu.name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                            startTime = computer.uptime(),
                            startItems = {},
                            status = "active"
                        }
                        
                        -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –Ω–∞—á–∞–ª–æ –∫—Ä–∞—Ñ—Ç–∞
                        if meKnowledge.items then
                            for _, item in ipairs(meKnowledge.items) do
                                observation.startItems[item.name] = item.size or 0
                            end
                        end
                        
                        currentObservations[i] = observation
                        
                    elseif not currentBusy and lastBusy and currentObservations[i] then
                        local observation = currentObservations[i]
                        observation.endTime = computer.uptime()
                        observation.duration = observation.endTime - observation.startTime
                        observation.status = "completed"
                        
                        -- –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
                        updateItemCounts()
                        
                        -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –±—ã–ª–∏ —Å–∫—Ä–∞—Ñ—á–µ–Ω—ã
                        local craftedItems = {}
                        if meKnowledge.items then
                            for _, item in ipairs(meKnowledge.items) do
                                local startCount = observation.startItems[item.name] or 0
                                local endCount = item.size or 0
                                if endCount > startCount then
                                    table.insert(craftedItems, {
                                        itemID = item.name,
                                        itemLabel = item.label or item.name,
                                        amount = endCount - startCount
                                    })
                                    
                                    -- –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫—Ä–∞—Ñ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
                                    meKnowledge.craftTimes[item.name] = observation.duration
                                    print("   üíæ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –∫—Ä–∞—Ñ—Ç–∞ –¥–ª—è " .. (item.label or item.name) .. ": " .. string.format("%.1f", observation.duration) .. " —Å–µ–∫")
                                end
                            end
                        end
                        
                        observation.craftedItems = craftedItems
                        
                        if not meKnowledge.craftHistory then
                            meKnowledge.craftHistory = {}
                        end
                        table.insert(meKnowledge.craftHistory, observation)
                        
                        saveEssentialData()
                        
                        print("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω –∫—Ä–∞—Ñ—Ç –Ω–∞ –¶–ü #" .. i .. ", –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " .. string.format("%.1f", observation.duration) .. " —Å–µ–∫")
                        if #craftedItems > 0 then
                            print("   üì¶ –°–∫—Ä–∞—Ñ—á–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: " .. #craftedItems)
                            for j, item in ipairs(craftedItems) do
                                if j <= 3 then
                                    print("     - " .. item.itemLabel .. " x" .. item.amount)
                                end
                            end
                            if #craftedItems > 3 then
                                print("     ... –∏ –µ—â–µ " .. (#craftedItems - 3) .. " –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
                            end
                        end
                        currentObservations[i] = nil
                    end
                    
                    lastCpuState[i] = {busy = currentBusy, name = cpu.name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}
                end
            end
        end
        
        os.sleep(2) 
    end
end

-- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
local function toggleCraftMonitoring()
    if monitoring then
        if not confirmAction("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∞—Ñ—Ç–æ–≤?") then
            return
        end
        monitoring = false
        if monitorThread then
            monitorThread:join()
            monitorThread = nil
        end
        print("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∞—Ñ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else
        if not confirmAction("–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∞—Ñ—Ç–æ–≤?") then
            return
        end
        monitoring = true
        monitorThread = thread.create(monitorActiveCrafts)
        print("üéØ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∞—Ñ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω")
    end
    os.sleep(2)
end

local function showMonitoringStatus()
    term.clear()
    print("=== üéØ –°–¢–ê–¢–£–° –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ö–†–ê–§–¢–û–í ===")
    
    if monitoring then
        print("üìä –°—Ç–∞—Ç—É—Å: üü¢ –ê–ö–¢–ò–í–ï–ù")
        print("üëÅÔ∏è  –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫—Ä–∞—Ñ—Ç–∞–º–∏...")
    else
        print("üìä –°—Ç–∞—Ç—É—Å: üî¥ –í–´–ö–õ–Æ–ß–ï–ù")
    end
    
    print("\n‚ö° –ê–ö–¢–ò–í–ù–´–ï –¶–ü:")
    local success, cpus = pcall(me.getCraftingCPUs)
    local activeCount = 0
    if success and cpus then
        for i, cpu in ipairs(cpus) do
            if cpu and cpu.busy then
                print("   –¶–ü #" .. i .. ": üü° –ó–ê–ù–Ø–¢ - " .. (cpu.name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"))
                activeCount = activeCount + 1
            end
        end
    end
    if activeCount == 0 then
        print("   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–∞—Ñ—Ç–æ–≤")
    end
    
    print("\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –ù–ê–ë–õ–Æ–î–ï–ù–ò–Ø:")
    local recentObservations = {}
    if meKnowledge.craftHistory then
        for i = #meKnowledge.craftHistory, math.max(1, #meKnowledge.craftHistory - 4), -1 do
            table.insert(recentObservations, meKnowledge.craftHistory[i])
        end
    end
    
    if #recentObservations == 0 then
        print("   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—à–ª—ã—Ö –∫—Ä–∞—Ñ—Ç–∞—Ö")
    else
        for i, obs in ipairs(recentObservations) do
            print("   " .. i .. ". –¶–ü #" .. obs.cpuIndex .. " (" .. (obs.cpuName or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è") .. ")")
            print("      –í—Ä–µ–º—è: " .. string.format("%.1f", obs.duration or 0) .. " —Å–µ–∫")
            if obs.craftedItems and #obs.craftedItems > 0 then
                for j, item in ipairs(obs.craftedItems) do
                    if j <= 2 then 
                        print("      üì¶ " .. (item.itemLabel or item.itemID) .. " x" .. item.amount)
                    end
                end
                if #obs.craftedItems > 2 then
                    print("      ... –∏ –µ—â–µ " .. (#obs.craftedItems - 2) .. " –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
                end
            end
            print("      ---")
        end
    end
    
    print("\nüìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: " .. (meKnowledge.craftHistory and #meKnowledge.craftHistory or 0))
    print("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    io.read()
end

-- –£–º–Ω—ã–π –ø–æ–∏—Å–∫ craftable –ø–æ –¥–∞–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–∞ (–±–µ–∑ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –∫—Ä–∞—Ñ—Ç–∞)
local function findCraftableSmart(itemID, itemName)
    print("üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫ craftable –¥–ª—è: " .. itemName)
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    if meKnowledge.patterns and meKnowledge.patterns[itemID] then
        local craftableIndex = meKnowledge.patterns[itemID]
        print("   ‚úÖ –ù–∞–π–¥–µ–Ω –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö: craftable #" .. craftableIndex)
        return craftableIndex
    end
    
    -- –ò—â–µ–º —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ itemStack –≤ craftables
    if meKnowledge.craftables then
        for i, craftableInfo in ipairs(meKnowledge.craftables) do
            if craftableInfo.itemStack and craftableInfo.itemStack.name == itemID then
                print("   ‚úÖ –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ itemStack: craftable #" .. i)
                meKnowledge.patterns[itemID] = i
                saveEssentialData()
                return i
            end
        end
    end
    
    -- –ò—â–µ–º –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é label –∏–ª–∏ –∏–º–µ–Ω–∏
    if meKnowledge.craftables then
        for i, craftableInfo in ipairs(meKnowledge.craftables) do
            if craftableInfo.itemStack then
                local stack = craftableInfo.itemStack
                if stack.label and stack.label:lower():find(itemName:lower(), 1, true) then
                    print("   ‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é label: craftable #" .. i)
                    meKnowledge.patterns[itemID] = i
                    saveEssentialData()
                    return i
                end
            end
        end
    end
    
    print("   ‚ùå Craftable –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
    return nil
end

local function updateItemCounts()
    local success, items = pcall(me.getItemsInNetwork)
    if success and items and meKnowledge.items then
        for i, item in ipairs(items) do
            if item and item.name then
                for j, knownItem in ipairs(meKnowledge.items) do
                    if knownItem.name == item.name then
                        knownItem.size = item.size or 0
                        break
                    end
                end
            end
        end
    end
end

-- –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¶–ü
local function getAvailableCPU(preferredCPUs, allowOtherCPUs)
    local success, cpus = pcall(me.getCraftingCPUs)
    if not success or not cpus then
        return nil
    end
    
    -- –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—Ä–µ–¥–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –¶–ü
    for _, cpuIndex in ipairs(preferredCPUs) do
        if cpus[cpuIndex] and not cpus[cpuIndex].busy then
            return cpuIndex
        end
    end
    
    -- –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –¶–ü
    if allowOtherCPUs then
        for i, cpu in ipairs(cpus) do
            if cpu and not cpu.busy then
                -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –¶–ü –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö (—É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã)
                local isPreferred = false
                for _, preferredIndex in ipairs(preferredCPUs) do
                    if i == preferredIndex then
                        isPreferred = true
                        break
                    end
                end
                if not isPreferred then
                    return i
                end
            end
        end
    end
    
    return nil
end

-- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫—Ä–∞—Ñ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¶–ü
local function requestCraft(itemID, amount, preferredCPUs, allowOtherCPUs, craftName)
    local craftableIndex = nil
    
    for name, data in pairs(craftDB) do
        if data.itemID == itemID then
            craftableIndex = data.craftableIndex
            break
        end
    end
    
    if not craftableIndex then
        craftableIndex = findCraftableSmart(itemID, craftName)
        if craftableIndex then
            for name, data in pairs(craftDB) do
                if data.itemID == itemID then
                    data.craftableIndex = craftableIndex
                    saveConfig()
                    break
                end
            end
        else
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ craftable –¥–ª—è " .. craftName)
            return false
        end
    end
    
    local success, craftables = pcall(me.getCraftables)
    if not success or not craftables or not craftables[craftableIndex] then
        print("‚ùå Craftable –Ω–µ –Ω–∞–π–¥–µ–Ω: #" .. craftableIndex)
        return false
    end
    
    local craftable = craftables[craftableIndex]
    local craftSuccess, result = pcall(craftable.request, amount)
    
    if craftSuccess then
        if result then
            print("‚úÖ –ö—Ä–∞—Ñ—Ç –∑–∞–∫–∞–∑–∞–Ω: " .. craftName .. " x" .. amount)
            return true
        else
            print("‚ùå –ö—Ä–∞—Ñ—Ç –≤–µ—Ä–Ω—É–ª false: " .. craftName)
            return false
        end
    else
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –∫—Ä–∞—Ñ—Ç–∞: " .. tostring(result))
        return false
    end
end

local function waitForCraft(itemID, targetAmount, craftName)
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∫—Ä–∞—Ñ—Ç–∞ " .. craftName .. "...")
    
    local averageTime = meKnowledge.craftTimes and meKnowledge.craftTimes[itemID]
    local timeout = averageTime and (averageTime * 2 + 60) or 300
    local startTime = computer.uptime()
    
    if averageTime then
        print("   üìä –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~" .. string.format("%.1f", averageTime) .. " —Å–µ–∫")
    end
    
    while computer.uptime() - startTime < timeout do
        updateItemCounts()  
        local currentCount = getItemCount(itemID)
        local elapsed = math.floor(computer.uptime() - startTime)
        print("   –ü—Ä–æ–≥—Ä–µ—Å—Å: " .. currentCount .. "/" .. targetAmount .. " (" .. elapsed .. "—Å)")
        
        if currentCount >= targetAmount then
            print("‚úÖ –ö—Ä–∞—Ñ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! " .. craftName)
            
            if not meKnowledge.craftTimes or not meKnowledge.craftTimes[itemID] then
                local actualTime = computer.uptime() - startTime
                if not meKnowledge.craftTimes then meKnowledge.craftTimes = {} end
                meKnowledge.craftTimes[itemID] = actualTime
                saveEssentialData()
                print("   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤—Ä–µ–º—è –∫—Ä–∞—Ñ—Ç–∞: " .. string.format("%.1f", actualTime) .. " —Å–µ–∫")
            end
            
            return true
        end
        
        os.sleep(5)
    end
    
    print("‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫—Ä–∞—Ñ—Ç–∞!")
    return false
end

-- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∫—Ä–∞—Ñ—Ç–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
local function craftLoop()
    if not confirmAction("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç?") then
        print("‚ùå –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω")
        return
    end
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–∞...")
    
    while running do
        for name, craftData in pairs(craftDB) do
            if not running then break end
            
            print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞: " .. name)
            updateItemCounts()
            local currentCount = getItemCount(craftData.itemID)
            print("üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: " .. currentCount .. "/" .. craftData.targetAmount)
            
            if currentCount < craftData.targetAmount then
                local needed = craftData.targetAmount - currentCount
                print("üõ†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∫—Ä–∞—Ñ—Ç–∏—Ç—å: " .. needed .. " —à—Ç.")
                
                -- –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –¶–ü
                local availableCPU = getAvailableCPU(craftData.preferredCPUs, craftData.allowOtherCPUs)
                
                if availableCPU then
                    print("‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¶–ü #" .. availableCPU)
                    if requestCraft(craftData.itemID, needed, craftData.preferredCPUs, craftData.allowOtherCPUs, name) then
                        waitForCraft(craftData.itemID, craftData.targetAmount, name)
                    else
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ñ—Ç")
                    end
                else
                    print("‚è≥ –í—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¶–ü –∑–∞–Ω—è—Ç—ã, –æ–∂–∏–¥–∞–Ω–∏–µ...")
                    os.sleep(10)
                end
            else
                print("‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            end
            
            print("‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ " .. craftData.checkTimeout .. " —Å–µ–∫...")
            os.sleep(craftData.checkTimeout)
        end
        
        if running then
            print("\n--- üîÑ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω ---")
            os.sleep(10)
        end
    end
end

local function showMEKnowledge()
    term.clear()
    print("=== üìö –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô ME –°–ò–°–¢–ï–ú–´ ===")
    
    print("\nüì¶ –ü–†–ï–î–ú–ï–¢–´ –í –°–ò–°–¢–ï–ú–ï (" .. (meKnowledge.items and #meKnowledge.items or 0) .. "):")
    showPaginated(meKnowledge.items or {}, "üì¶ –ü–†–ï–î–ú–ï–¢–´ –í –°–ò–°–¢–ï–ú–ï", 15)
    
    print("\nüõ†Ô∏è CRAFTABLES (" .. (meKnowledge.craftables and #meKnowledge.craftables or 0) .. "):")
    showPaginated(meKnowledge.craftables or {}, "üõ†Ô∏è CRAFTABLES", 15)
    
    print("\nüîó –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´:")
    local patternsList = {}
    if meKnowledge.patterns then
        for itemID, craftableIndex in pairs(meKnowledge.patterns) do
            table.insert(patternsList, "  " .. itemID .. " -> craftable #" .. craftableIndex)
        end
    end
    showPaginated(patternsList, "üîó –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´", 15)
    
    print("\n‚ö° –¶–ü (" .. (meKnowledge.cpus and #meKnowledge.cpus or 0) .. "):")
    showPaginated(meKnowledge.cpus or {}, "‚ö° –¶–ü", 10)
    
    print("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    io.read()
end

local function showCraftableDetails()
    if not meKnowledge.craftables or #meKnowledge.craftables == 0 then
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ craftables")
        os.sleep(2)
        return
    end
    
    local dataToShow = {}
    
    for i, craftable in ipairs(meKnowledge.craftables) do
        local craftableText = "\nCraftable #" .. i .. ":\n"
        
        if craftable.itemStack then
            craftableText = craftableText .. "  ItemStack:\n"
            craftableText = craftableText .. "    ID: " .. (craftable.itemStack.name or "–Ω–µ—Ç") .. "\n"
            craftableText = craftableText .. "    Label: " .. (craftable.itemStack.label or "–Ω–µ—Ç") .. "\n"
            craftableText = craftableText .. "    Size: " .. (craftable.itemStack.size or "–Ω–µ—Ç") .. "\n"
        end
        
        craftableText = craftableText .. "  –ú–µ—Ç–æ–¥—ã: " .. table.concat(getTableKeys(craftable.methods or {}), ", ") .. "\n"
        
        if craftable.fields and next(craftable.fields) ~= nil then
            craftableText = craftableText .. "  –ü–æ–ª—è:\n"
            for key, value in pairs(craftable.fields) do
                craftableText = craftableText .. "    " .. key .. ": " .. tostring(value) .. "\n"
            end
        end
        
        table.insert(dataToShow, craftableText)
    end
    
    showPaginated(dataToShow, "üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó CRAFTABLE", 3)
end

local function showAvailableCPUs()
    print("\n=== ‚ö° –î–û–°–¢–£–ü–ù–´–ï –¶–ü ===")
    if not meKnowledge.cpus or #meKnowledge.cpus == 0 then
        print("   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¶–ü")
        return
    end
    
    for i, cpu in ipairs(meKnowledge.cpus) do
        local status = cpu.busy and "üü° –ó–ê–ù–Ø–¢" or "üü¢ –°–í–û–ë–û–î–ï–ù"
        local storageMB = string.format("%.1f", (cpu.storage or 0) / 1024)
        
        print("–¶–ü #" .. i .. ":")
        print("  –°—Ç–∞—Ç—É—Å: " .. status)
        print("  –ü–∞–º—è—Ç—å: " .. storageMB .. " –ú–ë (" .. (cpu.storage or 0) .. " –ö–ë)")
        print("  –ù–∞–∑–≤–∞–Ω–∏–µ: " .. (cpu.name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"))
    end
end

-- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
local function addAutoCraft()
    term.clear()
    print("=== ‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–ö–†–ê–§–¢–ê ===")
    
    showAvailableCPUs()
    print()
    
    print("üì¶ –ü–û–°–õ–ï–î–ù–ò–ï 15 –ü–†–ï–î–ú–ï–¢–û–í –í –°–ò–°–¢–ï–ú–ï:")
    local recentItems = {}
    if meKnowledge.items and #meKnowledge.items > 0 then
        local startIndex = math.max(1, #meKnowledge.items - 14)
        for i = startIndex, #meKnowledge.items do
            if meKnowledge.items[i] then
                local item = meKnowledge.items[i]
                print("  " .. item.name .. " - " .. (item.size or 0) .. " —à—Ç. (" .. (item.label or "–Ω–µ—Ç") .. ")")
                table.insert(recentItems, item)
            end
        end
    else
        print("  –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    end
    
    print("\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–∞:")
    local craftName = io.read():gsub("^%s*(.-)%s*$", "%1")
    
    if craftDB[craftName] then
        print("–û—à–∏–±–∫–∞: –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        os.sleep(3)
        return
    end
    
    print("–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–µ–¥–º–µ—Ç–∞ (—Å–º. —Å–ø–∏—Å–æ–∫ –≤—ã—à–µ):")
    local itemID = io.read():gsub("^%s*(.-)%s*$", "%1")
    
    local itemExists = false
    local itemLabel = ""
    if meKnowledge.items then
        for i, item in ipairs(meKnowledge.items) do
            if item.name == itemID then
                itemExists = true
                itemLabel = item.label or itemID
                break
            end
        end
    end
    
    if not itemExists then
        print("–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç " .. itemID .. " –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ME —Å–∏—Å—Ç–µ–º–µ!")
        os.sleep(3)
        return
    end
    
    print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è:")
    local targetAmount = tonumber(io.read())
    
    if not targetAmount or targetAmount <= 0 then
        print("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!")
        os.sleep(2)
        return
    end
    
    print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –¶–ü –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2,3):")
    local cpuInput = io.read():gsub("^%s*(.-)%s*$", "%1")
    local preferredCPUs = {}
    for cpuStr in cpuInput:gmatch("[^,]+") do
        local cpuIndex = tonumber(cpuStr:match("%d+"))
        if cpuIndex then
            table.insert(preferredCPUs, cpuIndex)
        end
    end
    
    local maxCPUs = meKnowledge.cpus and #meKnowledge.cpus or 0
    if #preferredCPUs == 0 then
        print("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω—ã –Ω–æ–º–µ—Ä–∞ –¶–ü!")
        os.sleep(2)
        return
    end
    
    for _, cpuIndex in ipairs(preferredCPUs) do
        if cpuIndex < 1 or cpuIndex > maxCPUs then
            print("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¶–ü " .. cpuIndex .. "! –î–æ—Å—Ç—É–ø–Ω—ã: 1-" .. maxCPUs)
            os.sleep(2)
            return
        end
    end
    
    print("–†–∞–∑—Ä–µ—à–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –¶–ü –µ—Å–ª–∏ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç—ã? (y/n):")
    local allowOtherInput = io.read():lower()
    local allowOtherCPUs = (allowOtherInput == "y" or allowOtherInput == "yes" or allowOtherInput == "–¥–∞")
    
    print("–í–≤–µ–¥–∏—Ç–µ —Ç–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –º–∏–Ω–∏–º—É–º 5):")
    local timeout = tonumber(io.read())
    
    if not timeout or timeout < 5 then
        timeout = 5
        print("–¢–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –º–∏–Ω–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥")
    end
    
    local craftableIndex = findCraftableSmart(itemID, craftName)
    
    craftDB[craftName] = {
        itemID = itemID,
        targetAmount = targetAmount,
        preferredCPUs = preferredCPUs,
        allowOtherCPUs = allowOtherCPUs,
        checkTimeout = timeout,
        craftableIndex = craftableIndex
    }
    
    print("–ò–∑–º–µ—Ä–∏—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∫—Ä–∞—Ñ—Ç–∞? (y/n):")
    local measure = io.read():lower()
    if measure == "y" and craftableIndex then
        measureCraftTime(itemID, craftName, craftableIndex)
    end
    
    if saveConfig() then
        print("‚úÖ –ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç '" .. craftName .. "' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        print("   –ü—Ä–µ–¥–º–µ—Ç: " .. itemLabel)
        print("   –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –¶–ü: " .. table.concat(preferredCPUs, ", "))
        print("   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –¶–ü: " .. (allowOtherCPUs and "–í–ö–õ" or "–í–´–ö–õ"))
        if craftableIndex then
            print("   Craftable: #" .. craftableIndex)
        else
            print("   ‚ö†Ô∏è Craftable –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        end
    else
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–∞")
    end
    os.sleep(3)
end

local function viewCraftDB()
    if tableLength(craftDB) == 0 then
        print("–ë–∞–∑–∞ –ø—É—Å—Ç–∞!")
        os.sleep(2)
        return
    end
    
    local dataToShow = {}
    for name, data in pairs(craftDB) do
        local current = getItemCount(data.itemID)
        local status = current >= data.targetAmount and "‚úÖ" or "‚ùå"
        local craftableInfo = data.craftableIndex and ("Craftable: #" .. data.craftableIndex) or "Craftable: –Ω–µ –Ω–∞–π–¥–µ–Ω"
        local cpusInfo = "–¶–ü: " .. table.concat(data.preferredCPUs, ", ") .. (data.allowOtherCPUs and " (+–¥—Ä—É–≥–∏–µ)" or "")
        
        local craftTime = meKnowledge.craftTimes and meKnowledge.craftTimes[data.itemID]
        local timeInfo = craftTime and string.format("–í—Ä–µ–º—è –∫—Ä–∞—Ñ—Ç–∞: %.1f —Å–µ–∫", craftTime) or "–í—Ä–µ–º—è –∫—Ä–∞—Ñ—Ç–∞: –Ω–µ –∏–∑–º–µ—Ä–µ–Ω–æ"
        
        local entry = string.format("%s %s: %d/%d\n  ID: %s\n  %s\n  –¢–∞–π–º–∞—É—Ç: %d —Å–µ–∫\n  %s\n  %s\n---",
            status, name, current, data.targetAmount, data.itemID, cpusInfo, 
            data.checkTimeout, craftableInfo, timeInfo)
        
        table.insert(dataToShow, entry)
    end
    
    showPaginated(dataToShow, "üìä –ë–ê–ó–ê –ê–í–¢–û–ö–†–ê–§–¢–û–í", 5)
end

-- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
local function removeAutoCraft()
    term.clear()
    print("=== ‚ùå –£–î–ê–õ–ï–ù–ò–ï –ê–í–¢–û–ö–†–ê–§–¢–ê ===")
    
    if tableLength(craftDB) == 0 then
        print("–ë–∞–∑–∞ –ø—É—Å—Ç–∞!")
        os.sleep(2)
        return
    end
    
    local craftNames = {}
    for name in pairs(craftDB) do
        table.insert(craftNames, name)
    end
    
    showPaginated(craftNames, "–°–ü–ò–°–û–ö –ê–í–¢–û–ö–†–ê–§–¢–û–í", 20)
    
    print("\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    local craftName = io.read():gsub("^%s*(.-)%s*$", "%1")
    
    if craftDB[craftName] then
        if not confirmAction("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç '" .. craftName .. "'?") then
            print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            os.sleep(2)
            return
        end
        
        craftDB[craftName] = nil
        if saveConfig() then
            print("‚úÖ –£–¥–∞–ª–µ–Ω–æ!")
        else
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        end
    else
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ!")
    end
    os.sleep(2)
end

-- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
local function optimizeMemoryWithConfirm()
    if not confirmAction("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞–º—è—Ç—å? –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏.") then
        print("‚ùå –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    end
    
    optimizeMemory()
    if saveEssentialData() then
        print("‚úÖ –ü–∞–º—è—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    else
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    end
    os.sleep(1)
end

local function mainMenu()
    local craftThread = nil
    
    while running do
        term.clear()
        print("=== üß† –£–ú–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ö–†–ê–§–¢–ê ===")
        print("üìä –ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–æ–≤: " .. tableLength(craftDB))
        print("üìö –ó–Ω–∞–Ω–∏–π ME: " .. (meKnowledge.items and #meKnowledge.items or 0) .. " –ø—Ä–µ–¥–º–µ—Ç–æ–≤, " .. 
              (meKnowledge.craftables and #meKnowledge.craftables or 0) .. " craftables")
        print("‚ö° –¶–ü: " .. (meKnowledge.cpus and #meKnowledge.cpus or 0))
        print("‚è±Ô∏è –í—Ä–µ–º—è –∫—Ä–∞—Ñ—Ç–∞: " .. tableLength(meKnowledge.craftTimes or {}))
        print("üìã –ò—Å—Ç–æ—Ä–∏—è –∫—Ä–∞—Ñ—Ç–æ–≤: " .. (meKnowledge.craftHistory and #meKnowledge.craftHistory or 0))
        print("üéØ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: " .. (monitoring and "üü¢ –í–ö–õ" or "üî¥ –í–´–ö–õ"))
        print("üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: " .. (STORAGE_CONFIG.useExternalStorage and "üü¢ –í–ù–ï–®–ù–ï–ï" or "üî¥ –õ–û–ö–ê–õ–¨–ù–û–ï"))
        print()
        print("1 - üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–∞")
        print("2 - üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–∞")
        print("3 - ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç")
        print("4 - üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–æ–≤")
        print("5 - ‚ùå –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç")
        print("6 - üîç –ê–Ω–∞–ª–∏–∑ ME —Å–∏—Å—Ç–µ–º—ã")
        print("7 - üìö –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π ME")
        print("8 - üîé –î–µ—Ç–∞–ª–∏ craftables")
        print("9 - üßπ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ME")
        print("10 - üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤—Å–µ –∫—Ä–∞—Ñ—Ç—ã")
        print("11 - üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π")
        print("12 - ‚è±Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Ä–µ–º–µ–Ω–∏ –∫—Ä–∞—Ñ—Ç–∞")
        print("13 - üéØ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∞—Ñ—Ç–æ–≤")
        print("14 - üìä –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        print("15 - üßπ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞–º—è—Ç—å")
        print("16 - üóëÔ∏è  –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print("17 - üö™ –í—ã—Ö–æ–¥")
        print()
        print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        
        local choice = io.read()
        
        if choice == "1" and not craftThread then
            if tableLength(craftDB) == 0 then
                print("‚ùå –ù–µ—Ç –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–æ–≤ –≤ –±–∞–∑–µ!")
                os.sleep(2)
            else
                craftThread = thread.create(craftLoop)
                print("‚úÖ –ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç –∑–∞–ø—É—â–µ–Ω!")
                os.sleep(1)
            end
        elseif choice == "2" and craftThread then
            if not confirmAction("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç?") then
                print("‚ùå –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                os.sleep(1)
            else
                running = false
                craftThread:join()
                craftThread = nil
                running = true
                print("‚úÖ –ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                os.sleep(1)
            end
        elseif choice == "3" then
            addAutoCraft()
        elseif choice == "4" then
            viewCraftDB()
        elseif choice == "5" then
            removeAutoCraft()
        elseif choice == "6" then
            analyzeMESystem()
            print("\n–ù–∞–∂–º–∏—Ç–µ Enter...")
            io.read()
        elseif choice == "7" then
            showMEKnowledge()
        elseif choice == "8" then
            showCraftableDetails()
        elseif choice == "9" then
            if not confirmAction("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ME —Å–∏—Å—Ç–µ–º—ã? –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã.") then
                print("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                os.sleep(1)
            else
                analyzeMESystem()
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
                os.sleep(2)
            end
        elseif choice == "10" then
            researchAllCrafts()
            print("\n–ù–∞–∂–º–∏—Ç–µ Enter...")
            io.read()
        elseif choice == "11" then
            showResearchDB()
        elseif choice == "12" then
            showCraftTimes()
        elseif choice == "13" then
            toggleCraftMonitoring()
        elseif choice == "14" then
            showMonitoringStatus()
        elseif choice == "15" then
            optimizeMemoryWithConfirm()
        elseif choice == "16" then
            formatDatabases()
            print("\n–ù–∞–∂–º–∏—Ç–µ Enter...")
            io.read()
        elseif choice == "17" then
            if not confirmAction("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?") then
                print("‚ùå –í—ã—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω")
                os.sleep(1)
            else
                running = false
                if craftThread then
                    craftThread:join()
                end
                if monitorThread then
                    monitoring = false
                    monitorThread:join()
                end
                print("üëã –í—ã—Ö–æ–¥...")
                break
            end
        end
    end
end

-- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
print("–ó–∞–≥—Ä—É–∑–∫–∞ —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–∞...")
initExternalStorage()  -- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
loadMEKnowledge()
loadConfig()

if not meKnowledge.items or #meKnowledge.items == 0 then
    print("üîÑ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ME —Å–∏—Å—Ç–µ–º—ã...")
    analyzeMESystem()
end

print("‚úÖ –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!")
print("üìä –ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–æ–≤: " .. tableLength(craftDB))
print("üìö –ó–Ω–∞–Ω–∏–π ME: " .. (meKnowledge.items and #meKnowledge.items or 0) .. " –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
print("‚è±Ô∏è –í—Ä–µ–º—è –∫—Ä–∞—Ñ—Ç–∞: " .. tableLength(meKnowledge.craftTimes or {}))
print("üìã –ò—Å—Ç–æ—Ä–∏—è –∫—Ä–∞—Ñ—Ç–æ–≤: " .. (meKnowledge.craftHistory and #meKnowledge.craftHistory or 0))
print("üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: " .. (STORAGE_CONFIG.useExternalStorage and "üü¢ –í–ù–ï–®–ù–ï–ï" or "üî¥ –õ–û–ö–ê–õ–¨–ù–û–ï"))
os.sleep(2)

mainMenu()

